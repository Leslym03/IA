<html>
<head>
<title>GUN-TACTYX Player's Manual</title>
</head>
<body bgcolor=#CCCCCC>
<font face="verdana,arial" size=-1>

<center>
<h1>GUN-TACTYX</h1>
<h2>Player's Manual</h2>
<h3>Version 1.1.5 (2005/11/30)</h3>
<h4>Copyright &copy; 2003-2006 <a href="mailto:tetractys@users.sourceforge.net">Leonardo Boselli</a></h4>
</center>
<hr>
<p>The information in this manual and the associated software are provided "as is". There are no guarantees, explicit or implied, that the software and the manual are accurate.

<p><a href="#parti">Part I</a> and <a href="#partii">Part II</a> of this manual are mainly an excerpt taken from "<i>the SMALL booklet</i>", Copyright  &copy; 1997-2001 ITB CompuPhase, that was included in the official documentation of the SMALL language in November 2001 (version 1.8). To get the complete
manual visit the site <a href="http://www.compuphase.com">http://www.compuphase.com</a>, but remember that the SMALL language was modified and extended since then, so version 2.0
(or higher)
of the manual is not useful or even misleading to play GUN-TACTYX.

<p>The <a href="#intro">Introduction</a>, <a href="#partiii">Part III</a> and <a href="#partiv">Part
IV</a> are original in their contents. They give
respectively an overview of the game, a brief documentation of the extensions to the SMALL language needed to control the
behavior of the bots and some tips to modify the levels and the
resources of the game.</p>

<hr><a name="index"><h4>Index</h4></a>

<ul>
<p align=center><li><a href=#intro>Introduction<br>
  <br>
  </a>
<ul>
<li><a href=#intro0>0.0 A Bit of History</a>
<li><a href=#intro1>0.1 Why SMALL Language Scripts?</a>
<li><a href=#intro2>0.2 About the APOCALYX 3D Engine</a>
<li><a href=#intro3>0.3 Brief Description of the Game
  </a>
<li><a href="#intro4">0.4 The Story So Far...<br>
  <br>
  </a>
</ul>

<li><a href=#parti>Part I - The SMALL Language<br>
  <br>
  </a>
<ul>
<li><a href=#parti0>1.0 Introduction</a>
<li><a href=#parti1>1.1 SMALL: The Language</a>
<li><a href=#parti2>1.2 Data and Declarations</a>
<li><a href=#parti3>1.3 Functions</a>
<li><a href=#parti4>1.4 General Syntax</a>
<li><a href=#parti5>1.5 Operators and Expressions</a>
<li><a href=#parti6>1.6 Statements</a>
<li><a href=#parti7>1.7 Directives</a>
<li><a href=#parti8>1.8 Pitfalls: Differences from C</a>
<li><a href=#parti9>1.9 SMALL: The Compiler<br>
  <br>
  </a>
</ul>

<li><a href=#partii>Part II - The SMALL Language API<br>
  <br>
  </a>
<ul>
<li><a href=#partii0>2.0 Core Functions</a>
<li><a href=#partii1>2.1 Math Functions<br>
  <br>
  </a>
</ul>


<li><a href=#partiii>Part III - The GUN-TACTYX API<br>
  <br>
  </a>
<ul>
<li><a href=#partiii0>3.0 Get Warrior Properties</a>
<li><a href=#partiii1>3.1 Get Weapon Properties</a>
<li><a href=#partiii2>3.2 Get Action Properties</a>
<li><a href=#partiii3>3.3 Perform Actions<br>
  <br>
  </a>
</ul>


<li><a href="#partiv">Part IV - GUN-TACTYX Mods<br>
  <br>
  </a>
<ul>
<li><a href="#partiv0">4.0 The &quot;.dat&quot; files</a>
<li><a href="#partiv1">4.1 Simple substitutions</a>
<li><a href="#partiv2">4.2 Models</a>
<li><a href=#partiv3>4.3 Levels</a>
<li><a href=#partiv4>4.4 Scripts</a>
<li><a href=#partiv5>4.5 Command line options<br>
  <br>
  </a>
</ul>


</li>


</ul>

<hr><a name=intro><h3>Introduction</h3></a>

<hr><a name=intro0><h4>0.0&nbsp;&nbsp; A Bit of History</h4></a>

<p><b>GUN-TACTYX</b> (read it like <i>Gun Tactics</i>) is a "<i>CROBOTS-like game with QUAKE3-style graphics</i>". It belongs to the genre of <i>Programming Games</i> like Tom Poindexter's <b>CROBOTS</b>, an old 1985 DOS game, where some robots fight in an arena, firing missiles and avoiding enemies' projectiles. Such kind of games is involving, but is not interactive, in fact the player must develop the AI algorithms of his own robot using a programming language and then can follow its fights against other robots, possibly written by other players.<p>A great deal of these kind of games is available for download on the internet, most of them for free. An
on-line example is my
<a href="http://jrobots.sourceforge.net"><b>JROBOTS</b></a>, now at <b>SourceForge</b>
but previously&nbsp; hosted by <b>CFXweb.net</b> since year 2000,
that is a clone of CROBOTS with interesting features. While a player of CROBOTS had to use a subset of C to program his
robot (using only integer math because of the limitations of 1985 PCs), a player of JROBOTS uses the Java language and the robot consists of a single Java
class (visit <a href=http:www.javasoft.com>http//:www.javasoft.com</a> for more details about the Java language). A player can upload
the corresponding file to the on-line arena to compete in monthly tournaments against robots developed by other players. One of the most appealing characteristics of JROBOTS is the cooperative play, in fact, while the original CROBOTS had only
one-against-all kind of matches, JROBOTS supports matches among team of robots, from doubles to four
teams of eight robots each at a time.
<br>During the past tournaments, since April 2000, a large number of interesting <i>jrobots</i> were uploaded online and featured several different strategies that evolved with time.
Some time ago (September 2003) the arena was split in two categories, veterans and cadets, and
the major league was dominated by <b>IonStorm</b>, the strongest and more tuned
<i>jrobot</i> ever seen in the arena, written by <i>Alan Lund</i> from <i>Eau Claire</i>, WI, USA.
Other remarkable <i>jrobots</i> are <b>KillerBees</b>, written by <i>Walter
Nisticò</i> from Italy, that dominated the pre-IonStorm era, while more
recently appeared <b>Tango</b>, written by <i>Caos</i> from <i>Argentina.</i>
The story does not stop here and further brilliant exploits are expected for the
future of JROBOTS.&nbsp;
<p>Even if JROBOTS is a great game in its genre, it has some limitations. First of all, for security reasons the players can't use any of the Java APIs, because the tournaments run
on-line in Java applets hosted by the browser of the visitors. The latter could be a feature of the game, just like the reduced size (20Kb) of the class
file that contains the code of the robots and other rules of the same kind that makes the game more difficult for the players, but another issue
menaced the reliability of the game since the early beginning.<p>Every robot loaded in the arena has a Java thread assigned that runs its code. The environment of the <i>Java Virtual Machine</i> doesn't provide any effective tool to control the execution of Java threads,
so different CPUs, OpSyses and JVMs ran the simulation of the matches more or less differently
favoring from time to time one or the other <i>jrobot</i> and invalidating the reliability of any testing phase conducted on a
single machine. The problem was caused by the thread-based design of the game, rather than turn-based as other game of this kind are,
but fortunately a solution was found thanks to some of the most effective JROBOTS players
(the already cited <i>Walter Nisticò </i>in collaboration with <i>Alan Lund</i>). They developed a "<i>Virtual Clock Generator</i>" that ticks the time of the simulations and
smoothes their evoution on different machines.
<p>Anyway, since the beginning I wished to develop another game with the strongest points of JROBOTS, but at the same time graphically appealing, with an easy to control execution environment and a more realistic simulator. After a long list of failed
attempts, the answer to my wishes seems to be GUN-TACTYX.
<p>To get the complete history of JROBOTS and more recent news or to participate
to the monthly on-line tournaments, visit its site at SourceForge (<a href="http://jrobots.sourceforge.net">http://jrobots.sourceforge.net</a>).

<p><a href=#index>Index</a>
<hr><a name=intro1><h4>0.1 Why SMALL Language Scripts?</h4></a>

<p>In GUN-TACTYX the player must develop the AI algorithms of his team of bots using the SMALL scripting language. This document describes the use of SMALL to create scripts that control the bots'
behavior. The <b>SMALL language</b> is a powerful scripting language easily extendable and embeddable in other applications. Here the description of SMALL is limited to the features that are useful to create GUN-TACTYX scripts, but
plenty of other possibilities are available. To know more about SMALL visit the site of <b>ITB
CompuPhase</b> (<A HREF="http://www.compuphase.com">http://www.compuphase.com</A>).
<p>A SMALL interpreter can run instruction by instruction the bytecode generated by a compiler and provides a fine control of the execution. It is very easy to execute the code for any amount of ticks of (virtual)
CPU clock, suspend the execution starting the run of other code, resume it and simulate the heaviness (in clock ticks) of particular functions. As a consequence, all the bots of the game use the same amount of time to perform the same actions, saving the reliability of the simulation. Turn-based mechanisms, such as voluntary calls to functions
that release the execution of the bot's code, are no more needed.
<p>Another advantage of a SMALL interpreter is the memory management. Every bot has a fixed amount of memory to store all the information that it needs
(stack and heap space). It is no more possible for a bot to use large sizes of the application memory, mining the reliability of the
main program itself.<p>The SMALL compiler (&quot;sc.exe&quot;) translates sources
written in a C-like language (&quot;.sma&quot; extension) in a particular
bytecode (&quot;.amx&quot; extension). That kind of C-like language is very easy to learn for people who already knows Java, C, C++, C# or other
programming languages,
and may introduce inexperienced people to procedural programming.&nbsp;<p>GUN-TACTYX includes a command-line console from which
you can compile and execute (GUN-TACTYX unspecific) SMALL scripts. To activate the console, press the 'F3' key during the execution of the
application. When a script is in execution, you can read all the messages
generated on the console. The available commands are:
<ul>
<li><b>h :</b> to read the complete list of the commands
<li><b>d :</b> to list files in current directory
<li><b>d&nbsp; <i>dir_name</i> :</b> to change directory
<li><b>p :</b>  to list SMALL scripts in directory
<li><b>e&nbsp; <i>file_name</i> :</b> to edit a text file.
<li><b>x&nbsp; <i>file_name</i> :</b> to execute a SMALL script
<li><b>s&nbsp; <i>file_name</i> :</b> to compile a script (".sma" extension). The output has ".amx" extension. Remember that SMALL scripts need to be compiled before execution.
  You can also use the command line compiler &quot;sc.exe&quot; included in the &quot;<i>\bots</i>&quot;
  folder.
<li><b>g&nbsp; <i>file_name</i> :</b> to execute external commands.
</ul>

<p><a href=#index>Index</a>
<hr><a name=intro2><h4>0.2 About the APOCALYX 3D Engine</h4></a>

<p>GUN-TACTYX <b> </b> is a game based on the <b>APOCALYX Engine</b>. The use of an OpenGL 3D engine increases the hardware requirements of the application, in fact an accelerated 3D graphic card is absolutely necessary to follow the fights, but at the same time makes the game more
graphically
appealing. The engine is compatible with a simplified version of the resources used by <b>Quake III</b> (MD3 models and BSP levels), that's why I say that GUN-TACTYX is a "<i>CROBOTS-like game with QUAKE3-style graphics</i>".
<p>APOCALYX is a 3D engine in development based on OpenGL and other free libraries. Its sources are available under the GPL license at <A HREF="http://apocalyx.sourceforge.net">http://apocalyx.sf.net</A>. The engine already includes basic features, such as <i>lens flares, sky boxes, height field terrains, wavy surfaces, a
scene graph, sprites and billboards, a particle system, 3D sound, compressed data management,
loaders of several image formats, MD3 models loader and animator, BSP levels loader, a simple physics simulator, support for LUA and SMALL scripting languages</i> and other more advanced
characteristics are planned. The current implementation supports only Win98 (or higher) with an accelerated graphic card and OpenGL drivers installed.<p>I wish to thank all the people who helped in developing this engine. First of all, I must thank
<i> Matteo "Fuzz" Perenzoni</i>  for his <i> Apocalypse demo</i> written for the
2001 <a href="http://nehe.gamedev.net/data/contests/contest.asp?contest=03">NeHe's Apocalypse Contest</a>: The sources of his demo were the starting point
that made possible to develop the APOCALYX renderer and many nice effects.<p>Then I must thank a
good deal of great internet resources about game programming: <i>News Portals</i>, such as <a href="http://www.gamedev.net">GameDev</a>, <a href="http://www.flipcode.net">FlipCode</a>, <a href="http://www.cfxweb.net">CFXweb</a>,
<a href="http://www.gameprog.it">Game Programming Italia</a> and <a href="http://www.opengl.org">OpenGL.org</a>, and <i>Game Tutorials Sites</i>, such as <a href="http://nehe.gamedev.net">NeHe</a>, <a href="http://www.gametutorials.com">Game Tutorials</a>, <a href="http://www.sulaco.co.za">SULACO</a> and many others.<p>Finally, I wish to thank
<a href="mailto:TheGragster@yahoo.com">Grant Struthers</a> and <a href="mailto:janus@planetquake.com">Janus</a> for providing the models of the warrior and the weapon used in GUN-TACTYX.
They resources are hosted by <a href="http://www.polycount.com">PolyCount</a>.

<p> To know more about APOCALYX, visit <A HREF="http://apocalyx.sourceforge.net">http://apocalyx.sourceforge.net</A>.

<p><a href=#index>Index</a>
<hr><a name=intro3><h4>0.3 Brief Description of the Game</h4></a>

<p>The game consists in a fight among teams (from 2 up to 4) of <i>warriors</i> 
(from 64 bots down to 1).
The warriors move in a complex environment with walls that may be flat or
include ramps, bridges and two or more floors.
A warrior slides along the walls
maintaining its movement attitude, but it suddenly stops when hits another warrior.
<br><br>
Warriors have a brain that consists in a CPU with a clock frequency of 10KHz and a RAM with
a memory size of 32Kb. They are equipped with one gun that fires <i>bullets</i>  
and <i>
grenades</i>. The number of bullets loaded at the beginning is 50 with a maximum
of 100<i>, </i>
while grenades are limited to a maximum load
of 3 and initially the gun has only one of them. Recharges are provided on the battlefield,
as well as barrels of bullets.
<br><br>
Every warrior has an initial amount of health, energy and armor. <i>Health</i> starts from the maximum, 100, and decreases when the warrior hits a bullet, 50 points per
hit, or a grenade explodes nearby. In the latter case the health lost
depends on the distance from the explosion up to 5 meters. When a warrior reach zero or less health, it
is disabled. <i>Energy</i> starts from 50, while the maximum is 100. It decreases 2 units per second when the warrior runs, increases 1 unit per second when the warrior is standing
or is crouched and keep its current value when the bot walks forward, backward
or crouched. When the energy reaches zero, the warrior can't run, but
can still walk. The <i>Armor</i>
value starts from 0, while the maximum is 100. Armor gives protection from hits decreasing the damage proportionally to its value, but every hit reduces at the same time the armor
value.<i>  </i>Recharges for health (<i>medikits</i>), energy (<i>food</i>) and armor
(<i>full-metal jackets</i>) are available on the battlefield. When a recharge is
raised by a bot, it disappears from the battlefield but is respawned after a
certain amount of time.<br>
<br>Warriors may rotate their forward direction around their vertical axis, rotate and bend the torso up to specific values, rotate and bend the head up to specific values. The gun and its aim device are linked to the torso and follow its movement, while other sensors to watch and hear and the device to speak are linked to the head.<br>
<br>Among the others described in <a href="#partiii">Part III</a>, some of the main functions available to warriors to interact with each other and with the environment are:
<ul>
<li><i>bool:say(int:word)</i>
<br> used to communicate with other bots. A warrior can "say" a word,
  that corresponds to an integer value, every half a second.<br>
<li><i>float:hear(&amp;item,&amp;sound,&amp;float:yaw,&amp;float:pitch,&amp;float:id)</i>
<br>useful to hear gun shots, grenade explosions or words spoken by nearby warriors.
  The nearest sound is reported with its type, distance and
  direction (<i>yaw</i> and <i>pitch</i> angles). Every "hear" takes 0.04 seconds.<br>
<li><i>float:sight()</i>
<br> used to get the distance of the walls in the direction in front of the head.
  Every &quot;sight&quot; takes 0.01 seconds.<br>
<li><i>float:aim(&item)</i>
<br>the same as <i>sight()</i>, but gets the distance of the walls in the direction of the gun or the distance of the nearest warrior between the gun and the
  wall using a sort of laser beam (the aim device). Every &quot;aim&quot;
  takes 0.04 seconds.<br>
<li><i>int:watch(&amp;item,&amp;float:dist,&amp;float:yaw,&amp;float:pitch,&amp;float:id)</i>
<br>useful to see the objects, not walls, around the warrior. Only the nearest object farther than a given distance is reported with its type, distance and direction. An object must be in front of the head within a characteristic angle of view
  (60 degrees or PI/3 radians) to be seen. Every "watch" takes 0.04 seconds.
</ul>
A match lasts for a certain duration (from 1 minute up to 1 hour) and this and
other values may be changed by the user. There are several condition for victory
the first of which can be selected by the player. They apply in the following order:
<p>The winner is the team that...</p>

<ol>
  <li><i>a</i>) &quot;<i>terminates the enemy
  chief</i><i>s</i>&quot;, that are the warriors that carry the team sign. All
  the chiefs of the enemy teams must be disabled. Chiefs can't drop the sign so
  they are easily recognizable and their team mates must protect them, while
  they also try to
  hit enemies.<br>
  <i>b</i>) &quot;<i>terminates the enemy teams</i>&quot;. All the warriors of
  the enemy teams must be disabled to win. When this goal is active the chiefs
    does not hold a sign but a weapon.<br>

  <i>c</i>) &quot;<i>captures the enemy sign</i>&quot;.
  The warriors of a single team must capture the sign of all the other teams to
  win, or alternatively disable all the enemies. The chiefs hold a sign at the
  beginning but can drop it to raise a weapon.<br>
  <br>
  ... or, if the timeout is reached, ...<br>
  <br>
    </li>
<li>has more team mates at the end of the match
<li>has terminated more enemies at the end of the match
<li>has more overall health at the end of the match
  </ol>
If none of the above conditions matches, the match resolves in a tie.
  <p>The winning conditions described above apply to 3 different modes of play: <i>Fight</i>
  mode, <i>Soccer</i> mode and <i>Race</i> mode.</p>
  <ol>
    <li><i>Fight</i> mode and its characteristics were already explained at the
      beginning of this section. Warriors hold a weapon so they can shoot
      bullets or grenades. Health, energy and the other warrior's properties
      change according to the rules cited above. This was the first mode of play
      implemented in GUN-TACTYX and the game includes 3 levels (<i>arena</i>, <i>plaza</i>
      and <i>maze</i>) that are tailored for fights.
    </li>
    <li><i>Soccer</i> mode is a particular kind of play where warriors don't
      hold any weapon (but weapons may appear in the level and warriors may use
      them). When this mode is active, a ball appears in the middle of the level
      at the point of coordinate (0,0,0). Warriors can hit the ball simply
      moving towards it. When a warrior hits the ball with its bounding box, the
      simulator resolves the collision according to these rules:<br>
      <i>a</i>)&nbsp;if the ball hits the warrior's torso, it simply bounces
      following the laws of elastic collisions, considering the normal vector
      that goes from the center of the warrior to the ball. The speed of the
      warrior is taken in account to compute the final speed of the ball.<br>
      <i>b</i>) if the ball hits the warrior's legs, it bounces as above but
      also an additional &quot;kick&quot; velocity is added. The direction of
      that velocity is given on the horizontal plane by the normal vector that
      goes from the center of the warrior to the ball, while the vertical
      component is given by the inclination of the warrior's torso. If the torso
      points up with a certain angle, the &quot;kick&quot; velocity will acquire
      an initial angle that points up. The speed of the &quot;kick&quot; is
      selected by the warrior through the function <i>setKickSpeed()</i> and its
      default maximum value is <i>5 m/s</i>. When a &quot;kick&quot; is
      performed, the ball bounces around losing a percentage of its speed equal
      to <i>getGroundElasticity()</i> after every collision with the geometry
      of the level. The elasticity has a default value of 80%.<br>
      The objective of every team of warriors is to send the ball in the goal
      area of enemy teams. The enemy area is located at the starting point of a
      team and is sphere shaped. A warrior can retrieve information about enemy
      goal areas through the function <i>getGoalLocation(),</i> with index 1, 2
      or 3 as argument for the first, second and third enemy teams, and <i>getGoalSize()</i>,
      that returns a default value of <i>7.5 m</i> for the diameter of the
      sphere. When the ball enters the goal area of a team, the warrior of that
      team nearest to the goal area is immediately disabled and the ball becomes
      a grenade that explodes in 3 seconds, while another ball suddenly appears
      in the middle of the field. The &quot;kills&quot; are assigned to the
      warrior that last touched the ball. Other behaviors of this mode are
      similar to the <i>Fight</i> mode, including the rules to find out the
      winner. This was the second mode of play
      implemented in GUN-TACTYX and the game includes only one level (<i>field</i>) that
      is tailored for <i>Soccer</i> matches.</li>
    <li><i>Race</i> mode is another particular kind of play where warriors don't
      hold any weapon (but weapons may appear in the level and warriors may use
      them). When this mode is active, the objective of the warriors is to move
      around the origin (the point with all coordinates equal to zero) in the
      counter-clockwise direction (watching from the top) avoiding the obstacles
      of the level. When a warrior move in the wrong direction, it loses health,
      while moving in the right direction increases its health. A complete turn
      around the origin gives an overall amount of health equal to 100. When a
      warrior reaches 100 points of health, it does not increase its health any
      more but all the other warriors decrease their health of the lacking
      amount. Another rule that is different from the other modes of play is the
      following: When two warriors collide, the one with the lowest health is
      disabled. Other behaviors of this mode are similar to the <i>Fight</i>
      mode, including the rules to find out the winner. This was the third mode of play
      implemented in GUN-TACTYX and the game does not include yet any level tailored for
      <i>Race</i> matches or examples of tactics suitable for this modality in
      the sample scripts. A level for <i>Race</i> matches should provide an
      obstacle&nbsp; in the middle around which the warriors must run: A
      possible choice already included in the game may be the <i>maze</i> level,
      but a more complex path, several obstacles and energy recharges make
      matches more interesting.&nbsp;</li>
  </ol>
  <p>To change mode or goal, enter the <i>options panel</i>, pressing '0' (zero)
  when the game shows the <i>main panel</i>, and change the corresponding
  entries according to your needs.</p>
  <p>This is only a brief overview of the game.
Other details appear in the list of the functions that control the bot's
  behavior available in <a href="#partiii">Part III</a>.
  <p>If you have any question, contact me at <A HREF="mailto:tetractys@users.sourceforge.net">tetractys@users.sf.net</A>.

<p><a href=#index>Index</a>
<hr><a name=intro4><h4>0.4 The Story So Far...</h4></a>

<ul>
<li><b>Wrokdam</b>&nbsp; <font size="-2">by</font><font size="-2"> <a href="mailto:TheGragster@NOSPAMyahoo.com">Grant Struthers</a></font>

<p>Wrokdam Von Gadmoore was a legendary arena gladiator in his time. He had no greater love than the glory of combat and spent his entire life shaping his body and mind into the perfect weapon. Tragically, a warrior's prime fades quickly.
<p>Wrokdam could feel the years catching up and it infuriated him. He swore he would never allow weakness to prevail even if his body betrayed him.  He decided to combat death itself through the use of cybernetics and began replacing parts of his body he felt had grown too weak to be useful in battle. He thought he had found true immortality.  He was terribly mistaken.
<p>As time passed, Wrokdam slowly slipped into madness. His mind could not endure the time his new body could and he soon lost himself to the machine.
<p>Now the monster known as Wrokdam wanders the world in search of combat and no one knows if any part of his soul still lives.

<p><li><b>GUN-TACTYX&nbsp;</b> <font size="-2">by</font></font><font face="verdana,arial" size=-1><font size="-2">
<a href="mailto:boselli@uno.it">Leonardo Boselli</a></font>

<p>In a few decades people lost memory of Wrokdam and his past glory faded away. The cyber-gladiator's story became a legend known only by the oldest arena warriors, until Wrokdam was found still fighting in a provincial arena on a far planet at the border of the Empire.
<p>A young researcher of ZYX Corporation apprehended the military application of a body so highly trained for combat, so the mad warrior was captured and transferred to a gun-fight training area known as GUN-TACTYX.
<p>The researcher discovered that Wrokdam's body could become the perfect combat machine, but his brain was too weak, slow and mad to drive effectively his powerful devices. A hard decision was taken and an artificial brain was installed in place of Wrokdam's carbon-based one. Then his body was cloned hundreds of time to form teams of clones fighting each other to pick out the perfect warrior through natural selection.
<p>Only one thing lacks to make Wrokdam the strongest arena gladiator of every time: <b>The best gun-fighting algorithm for his artificial brain!</b>
<p><b>GUN-TACTYX: Now it's your play!</b>

<p><font size="-2">
<i>
The reader may ask where Wrokdam's original brain is now, but the answer is obvious if you know that ZYX Corporation's philosophy is:  "<b>Throw Away Nothing</b>".
<br>Wrokdam's brain is now employed as a consultant at ZYX Corporation and mainly keeps up running commentary of the fights among the clones taking place in the arenas of the GUN-TACTYX area. His deep experience in gun tactics is very useful to the developers that tune up the fighting algorithms.
<br>I don't know if he is really dissatisfied with his new condition, but I'm sure that he is a little envious of those artificially brained fighters that resemble the aspect of a warrior once know as <b>Wrokdam: A legendary arena gladiator in his time.</b>
</i>
</font>
</ul>

<p><a href=#index>Index</a>
<hr><a name=parti><h3>Part I - The SMALL Language</h3></a>
<font size="-2">Excerpt from "<i>the SMALL booklet</i>" (1.8), Copyright  &copy; 1997-2001 ITB CompuPhase.</font>
<hr>

<a name=parti0><h4>1.0 Introduction</h4></a>

<p>SMALL is a simple, typeless, 32-bit extension language with a C-like syntax. Execution speed, stability, simplicity and a small footprint were essential design criterions for both the language and the interpreter/abstract machine that a SMALL program runs on. [...] The Small language was designed as a flexible language for manipulating objects in a host application. The tool set (compiler, abstract machine) were written so that they were easily extensible and would run on different software/hardware architectures. [...] SMALL is a descendent of the original SMALL C, which at its turn was a subset of C. Some of the modifications done to Small C, e.g. the removal of the type system and the substitution of pointers by references, were so fundamental that one could hardly call the language a subset of C or a C dialect. [...]
<p>As written in the previous paragraphs, SMALL is for customizing applications, not for writing applications. Small is weak on data structuring because Small programs are intended to manipulate objects in the host application, but the SMALL program is, by intent, denied direct access to any data outside its abstract machine. The only means that a SMALL program has to manipulate objects in the host application is by calling subroutines |so called "native functions"| that the host application provides. SMALL is flexible in that key area: calling functions. SMALL supports default values for any of the arguments of a function (not just the last), call-by-reference as well as call-by-value, and "named" as well as "positional" function arguments.
<p>SMALL does not have a "type checking" mechanism, by virtue of being a typeless
language, but it does offer in replacement a "classification checking" mechanism, called "tags". The tag system is especially convenient for function arguments because each argument may specify multiple acceptable tags. [...]

<p><a href=#index>Index</a><hr>
<a name=parti1><h4>1.1 SMALL: The Language</h4></a>

<p>SMALL is a simple programming language with a syntax reminiscent to the C programming language. A SMALL program consists of a set of functions and a set of variables. The variables are data objects and the functions contain instructions (called "statements") that operate on the data objects or that perform tasks. [...] SMALL separates the language from the function library. Since SMALL is designed to be an extension language for applications, the function set that a SMALL program has at its disposal depends on the implementation. As a result, the SMALL language has no intrinsic knowledge of any function; a program must declare every function that it uses. [...] A function must be declared, either by writing the definition (the function's prototype) somewhere near the top of the source file, or by including a text file that contains the required definition |along, perhaps, with definitions of constants and of other functions. [...] A stand-alone SMALL program starts execution with function <i>main()</i>. The arguments of a function are always enclosed in parentheses. If a function does not have any arguments, like function <i>main()</i>, the opening and closing parentheses are still present.
<p>SMALL is a "case sensitive" language: upper and lower case letters are considered to be different letters. [...] Semicolons [<i>to separate statements</i>] are optional, except when writing multiple statements on one line; when the body of a function is a single instruction, the braces (for a compound
instruction) are optional; "escape characters" are called "control characters" in SMALL, and they start with a caret ("^") rather than a backslash ("\").
<p>Fundamental elements of most programs are calculations, decisions (conditional execution), iterations (loops) and variables to store input data, output data and intermediate results. The next program example illustrates many of these concepts. The program calculates the greatest common divisor of two values using an algorithm invented by
Euclid. [<i>In the following example the author uses API function not available to GUN-TACTYX scripts: refer to <a href="#partii">Part II</a> to read the list of real usable core functions</i>]
<pre>/* the greatest common divisor of two values, using Euclid's' algorithm */
#include &quot;console&quot;
main() {
  print(&quot;Input two values^n&quot;)
  new a = getvalue()
  new b = getvalue()
  while (a != b)
    if (a &gt; b)
      a = a - b
    else
      b = b - a
  printf(&quot;The greatest common divisor is %d^n&quot;, a)
}</pre>
When the body of a function contains more than one statement, these statements must be embodied in braces |the "{" and "}" characters. This groups the instructions to a single compound statement. The notion of grouping statements in a compound statement applies as well to the bodies of <i>if-else</i> and loop instructions.
<p>The <i>new</i> keyword creates a variable. The name of the variable follows <i>new</i>. It is common, but not imperative, to assign a value to the variable already at the moment of its creation [<i>otherwise it is set to zero by
</i><i>default</i>]. Variables must be declared before they are used in an expression. The <i>getvalue()</i> function (also part of the "console" function set [<i>not available to GUN-TACTYX scripts</i>]) reads in a value from the keyboard and returns the result. Note that SMALL is a typeless language, all variables are numeric cells that can hold a signed integral value.
<p>Loop instructions, like <i>while</i>, repeat a single instruction as long as the loop condition, the expression between parentheses, is "true". To execute multiple instructions in a loop, again, requires one to group these in a compound statement. The <i>if-else</i> instruction has one instruction for the "true" clause and one for the "false". The loop condition for the while loop is "(a != b)"; the symbol != is the "not equal to" operator. That is, the <i>if-else</i> instruction is repeated until a equals b.
<p>It is good practice to indent the instructions that run under control of another statement, as is done in the preceding example. [...]
<p>Next to simple variables with a size of a single cell, SMALL supports arrays and symbolic constants, as exemplified in the program below. It  displays a series of prime numbers using the well known "sieve of
Eratosthenes&quot;.
<pre>/* Print all primes below 100, using the &quot;Sieve of Eratosthenes&quot; algorithm */
#include &quot;console&quot;
main() {
  const max_primes = 100
  new series[max_primes] = { true, ... }
  for (new i = 2; i &lt; max_primes; ++i)
    if (series[i]) {
      printf(&quot;%d &quot;, i)
      /* filter all multiples of this &quot;prime&quot; from the list */
      for (new j = 2 * i; j &lt; max_primes; j += i)
        series[j] = false
    }
}</pre>
When a program or sub-program has some fixed limit built-in, it is good practice create a symbolic constant for it. In the preceding example, the symbol <i>max_primes</i> is a constant with the value 100. The program uses the symbol <i>max_primes</i> three times after its definition: in the declaration of the variable series and in both for loops. If we were to adapt the program to print all primes below 500, there is now only one line to change.
<p>Like simple variables, arrays may be initialized upon creation. SMALL offers a convenient shorthand to initialize all elements to a fixed value: all hundred elements of the "series" array are set to true |without requiring that the programmer types in the word "true" a hundred times. The symbols true and false are predefined constants.
<p>When a simple variable, like the variables <i>i</i> and <i>j</i> in the primes sieve example, is declared in the first expression of a for loop, the variable is valid only inside the loop. Variable declaration has its own rules; it is not a statement, although it looks like one. One of those rules is that the 
first expression of a <i>for</i> loop may contain a variable declaration. Both <i>for</i> loops also introduce new operators in their third expression. The ++ operator increments its operand by one; that is, <i>++i</i> is equal to <i>i = i + 1</i>. The += operator adds the expression on its right to the variable on its left; that is, <i>j += i</i> is equal to <i>j = j + i</i>.
The first element in the series array is <i>series[0]</i>, if the array holds <i>max_primes</i> elements, the last element in the array is series<i>[max_primes-1]</i>. If <i>max_primes</i> is 100, the last element, then, is <i>series[99]</i>. Accessing <i>series[100]</i> is invalid.
<p>Larger programs separate tasks and operations into functions. Using functions increases the modularity of programs and functions, when well written, are portable to other programs. The following example implements a function to calculate numbers from the Fibonacci series. [...] The assert instruction at the top of the fibonacci function deserves explicit "assert" statement,  it guards against "impossible" or invalid conditions.
<pre>/* Calculation of Fibonacci numbers by iteration */
#include &quot;console&quot;
main() {
  print(&quot;Enter a value: &quot;)
  new v = getvalue()
  printf(&quot;The value of Fibonacci number %d is %d^n&quot;, v, fibonacci(v) )
}

fibonacci(n) {
  assert n &gt; 0
  new a = 0, b = 1
  for (new i = 2; i &lt; n; i++) {
    new c = a + b
    a = b
    b = c
  }
  return a + b
}</pre>
The implementation of a user-defined function is not much different than that of function main. Function fibonacci shows two new concepts, though: it receives an input value through a parameter and it returns a value (it has a "result"). Function parameters are declared in the function header; the single parameter in this example is <i>n</i>. Inside the function, a parameter behaves as a local variable, but one whose value is passed from the outside at the call to the function. The <i>return</i> statement ends a function and sets the result of the function. It need[<i>s</i>] not [<i>to</i>] appear at the very end of the function; early exits are permitted. [...]
<p>Inside a function, an argument behaves like a local variable: you may modify it. These modifications remain local to the function [...], however. [...]. [<i>At the same time, arguments passed to a function are not modified outside of it.</i>] This concept is called "call by value". [...] [<i>But an argument can also be passed by reference prepending the
argument by a &amp; that </i>] specifically requests that changes that it makes to some of its function arguments are copied back to the variables of the caller of the function. [...] Arguments with an &amp; are copied back, arguments without is are not. "Copying back" is actually not the correct term. An argument tagged with an &amp; is passed to the function in a special way that allows the function to directly modify the original variable. This is called "call by reference" and an argument that uses it is a "reference argument". [...]
<p>To summarize the use of call-by-value versus call-by-reference: if a function has one output value, you typically use a return statement; if a function has more output values, you use reference arguments. You may combine the two inside a single function, for example in a function that returns its "normal" output via a reference argument and an error code in its return value.
<p>SMALL has no intrinsic "string" type; character strings are stored in arrays, with the convention that the array element behind the last valid character is zero. Working with strings is therefore equivalent with working with arrays. [...]
<p>In a typeless language, we might assign a different purpose to some array elements than to other elements in the same array. SMALL supports enumerated constants with an extension that allows it to mimic some functionality that other languages implement with "structures" or "records". [...]
<p>If you know the C programming language, you will have seen many concepts that you are familiar with, and a few new ones. If you don't know C, the pace of this introduction has probably been quite high. Whether you are new to C or experienced in C, [...] read the following pages carefully. If you know C or a C-like language, by the way, you may want to consult the chapter <a href="#parti8">Pitfalls: Differences form C</a> first. [...]

<p><a href=#index>Index</a><hr>
<a name=parti2><h4>1.2 Data and Declarations</h4></a>

<p>SMALL is a typeless language. All data elements are of type "cell", and a cell can hold an integral number. The size of a cell (in bytes) is system dependent - usually, a cell is 32-bits. The keyword <b>new</b> declares a new variable. For special declarations, the keyword <i>new</i> is replaced by <b>static</b>, <b>public</b> or <b>stock</b> (see below). A simple variable declaration creates a variable that occupies one "cell" of data memory. Unless it is explicitly initialized, the value of the new variable is zero.
<p>A variable declaration may occur:
<ul>
<li>at any position where a statement would be valid - local variables;
<li>at any position where a function declaration (native function declarations) or a function implementation would be valid - global variables;
<li>in the first expression of a for loop instruction - also local variables.
</ul>
<h5>Local declarations</h5>
<p>A local declaration appears inside a compound statement. A local variable can only be accessed from within the compound statement, and from
nested compound statements. A declaration in the first expression of a for loop instruction is also a local declaration.
<h5>Global declarations</h5>
<p>A global declaration appears outside a function and a global variable is accessible to any function. Global data objects can only be initialized
with constant expressions.
<h5>Static local declarations</h5>
<p>A local variable is destroyed when the execution leaves the compound block in which the variable was created. Local variables in a function only exist during the run time of that function. Each new run of the function creates and initializes new local variables. When a local variable is declared with the keyword <i>static</i> rather than <i>new</i>, the variable remains in existence after the end of a function. This means that static local variables provide private, permanent storage that is accessible only from a single function (or compound block). Like global variables, static local variables can only be initialized with constant expressions.
<h5>Static global declarations</h5>
A static global variable behaves the same as a normal global variable, except that its scope is restricted to the file that the declaration resides in. To declare a global variable as static, replace the keyword <i>new</i> by <i>static</i>.
<h5>Stock declarations</h5>
A global variable may be declared as <b>stock</b>. A stock declaration is one that the parser may remove or ignore if the variable turns out not to be used in the program. Stock variables are useful in combination with stock functions.
<h5>Public declarations</h5>
Global "simple" variables (no arrays) may be declared <b>public</b> in two ways:
<ul>
<li>declare the variable using the keyword <i>public</i> instead of <i>new</i>;
<li>start the variable name with the "@" symbol.
</ul>
Public variables behave like global variables. The abstract machine, however, has a special interface to access public variables (read and write). As such, a host program (which includes the abstract machine) may require that you declare a variable with a
specific name as "public" for special purposes - such as the most recent error number, or the general program state.
<h5>Constant variables</h5>
<p>It is sometimes convenient to be able to create a variable that is initialized once and that may not be modified. Such a variable behaves much like a symbolic constant, but it still is a variable. To declare a constant variable, insert the keyword <i>const</i> between the keyword that starts the variable declaration (<i>new</i>, <i>static</i>, <i>public</i> or <i>stock</i>) and the variable name. Examples:
<pre>new const address[4] = { 192, 0, 168, 66 }
public const status /* initialized to zero */</pre>
Three typical situations where one may use a constant variable are:
<ul>
<li>To create an "array" constant; symbolic constants cannot be indexed.
<li>For a public variable that should be set by the host application, and only by the host application. See the preceding section for public variables.
<li>A special case is to mark array arguments to functions as const. Array arguments are always passed by reference, declaring them as <i>const</i> guards against unintentional
  modification.
</ul>
<h5>Arrays (single dimension)</h5>
The syntax <i>name[constant]</i> declares name to be an array of "constant" elements, where each element is a single cell. The name is a placeholder of an identifier name of your choosing and constant is a positive non-zero value; constant may be absent. If there is no value between the brackets, the number of elements is set equal to the number of
initializers - see the example below. The array index range is "zero based" which means that the 
first element is at <i>name[0]</i> and the last element is <i>name[constant-1]</i>.
<h5>Initialization</h5>
<p>Data objects can be initialized at their declaration. The initializers of a global data object must be a constant. Arrays, global or local, must also be initialized with constants. Uninitialized data defaults to zero. Examples:
<pre>new i = 1
new j /* j is zero */
new k = 'a' /* k has character code for letter 'a' */
new a[] = {1,4,9,16,25} /* a has 5 elements */
new s1[20] = {'a','b'} /* the other 18 elements are 0 */
new s2[] = &quot;Hello world...&quot; /* a packed string */
Examples of invalid declarations:
new c[3] = 4 /* an array cannot be set to a value */
new i = &quot;Good-bye&quot; /* i must be an array for this initializer */
new q[] /* unknown size of array */
new p[2] = { i + j, k - 3 } /* array initilizers must be constants */</pre>
<h5>Progressive initilizers for arrays</h5>
<p>The ellipsis operator continues the progression of the initialization constants for an array, based on the last two initialized elements. The ellipsis operator (three dots, or "...") initializes the array up to its declared size. Examples:
<pre>new a[10] = { 1, ... } /* sets all ten elements to 1 */
new b[10] = { 1, 2, ... } /* sets: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 */
new c[8] = { 1, 2, 40, 50, ... } /* sets: 1, 2, 40, 50, 60, 70, 80, 90 */
new d[10] = { 10, 9, ... } /* sets: 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 */</pre>
<h5>Multi-dimensional arrays</h5>
<p>Multi-dimensional arrays are arrays that contain references to the sub-arrays (The current implementation of the SMALL compiler supports only arrays with up to two dimensions). That is, a two-dimensional array is an "array of single-dimensional arrays". Below are a few examples of declarations of two-dimensional arrays.
<pre>new a[4][3]
new b[3][2] = { { 1, 2 }, { 3, 4 }, { 5, 6 } }
new c[3][3] = { { 1 }, { 2, ...}, { 3, 4, ... } }
new d[2][5] = { &quot;agreement&quot;, &quot;dispute&quot; }
new e[2][] = { !&quot;OK&quot;, !&quot;Cancel&quot; }</pre>
As the last declaration (variable "e") shows, the final dimension may have an unspecified length, in which case the length of each sub-array is determined from the related initializer. Every sub-array may have a different size; in this particular example, "e[1][5]" contains the letter "l" from the word "Cancel", but "e[0][5]" is invalid because the length of the sub-array "e[0]" is only three cells (containing the letters "O", "K" and a zero terminator).
<h5>Tag names</h5>
<p>A tag is a label that denotes the objective of |or the meaning of| a variable, a constant or a function result. Tags are entirely optional, their only purpose is to allow a stronger compile-time error checking of operands in expressions, of function arguments and of array indices. Tags should not be confused with variable types in C and other languages. A tagged variable is still a cell, which holds an integral number.
<ul>
<li>a type specifies the memory layout and range of variables and function results
<li>a tagname labels the purpose of variables, constants and function results
</ul>
A tag consists of a symbol name followed by a colon; it has the same syntax as a Label syntax. A tag precedes the symbol name of a variable, constant or function. In an assignment, only the right hand of the "=" sign may be tagged. Examples of valid tagged variable and constant definitions are:
<pre>new bool:flag = true /* &quot;flag&quot; can only hold &quot;true&quot; or &quot;false&quot; */
const error:success = 0
const error:fatal= 1
const error:nonfatal = 2
error:errno = fatal</pre>
The sequence of the constants success, fatal and nonfatal could more conveniently be declared using an <i>enum</i> instruction, as illustrated below. The enumeration instruction below creates four constants, success, fatal, nonfatal and error, all with the tag error.
<pre>enum error {
  success,
  fatal,
  nonfatal,
}</pre>
A typical use of "tagged" enums is in conjunction with arrays. If every field of an array has a distinct purpose, you can use a tagged enum to declare the size of an array and to add tag checking to the array usage in a single step:
<pre>enum rectangle {
  left,
  top,
  right,
  bottom
}
new my_rect[rectangle] /* array is declared as having 4 cells */
my_rect[left] = 10
my_rect[top] = 5
my_rect[right] = 30
my_rect[bottom] = 12
for (new i = 0; rectangle:i &lt; rectangle; ++i)
  my_rect[rectangle:i] *= 2</pre>
After the declaration of &quot;my_rect&quot; above, you can access the second field of <i>my_rect</i> with
&quot;my_rect[top]&quot;, but saying "my_rect[1]" will give a parser diagnostic (a warning or error message). A tag override (or a tag cast) adjusts a function, constant or variable to the desired tag name. The for loop at the last two lines in the preceding example depicts this: the loop variable i is a plain, untagged cell, an it must be cast to the tag rectangle before as an index in the array <i>my_rect</i>. Note that the <i>enum</i> construct has created both a constant and a tag with the name "rectangle".
<p>Tag names introduced so far started with a lower case letter; these are "weak" tags. Tag names that start with an upper case letter are "strong" tags. The difference between weak and strong tags is that weak tags may, in a few circumstances, be dropped implicitly by the SMALL parser - so that a weakly tagged expression becomes an untagged expression. The tag checking mechanism verifies the following situations:
<ul>
<li>When the expressions on both sides of a binary operator have a different tag, or when one of the expressions is tagged and the other is not, the compiler issues a "tag mismatch" diagnostic. There is no difference between weak and strong tags in this situation.
<li>There is a special case for the assignment operator: the compiler issues a diagnostic if the variable on the left side of an assignment operator has a tag, and the expression on the right side either has a different tag or is untagged. However, if the variable on the left of the assignment operator is untagged, it accepts an expression (on the right side) with a weak tag. In other words, a weak tag is dropped in an assignment when the lvalue is untagged.
<li>Passing arguments to functions follows the rule for assignments. The compiler issues a diagnostic when the formal parameter (in a function definition) has a tag and the actual parameter (in the function call) either is untagged or has a different tag. However, if the formal parameter is untagged, it also accepts a parameter with any weak tag.
<li>An array may specify a tag for every dimension, see the &quot;my_rect&quot; example above. Tag checking array indices follows the rule of binary operator tag checking: there is no difference between weak and strong tags.
</ul>

<p><a href=#index>Index</a><hr>
<a name=parti3><h4>1.3 Functions</h4></a>

<p>A function declaration species the name of the function and, between parentheses, its formal parameters. A function may also return a value. A function declaration must appear on a global level (i.e. outside any other functions) and is globally accessible. If a semicolon follows the function declaration (rather than a statement), the declaration denotes a forward declaration of the function. The <b>return</b> statement sets the function result. For example, function sum (see below) has as result the value of both its arguments added together. The <i>return</i> expression is optional for a function, but one cannot use the value of a function that does not return a value.
<pre>sum(a, b)
  return a + b</pre>
Arguments of a function are (implicitly declared) local variables for that function. The function call determines the values of the arguments. [...] Usually a function contains local variable declarations and consists of a compound statement. In the following example, note the assert statement to guard against
negative values for the exponent.
<pre>power(x, y) {
/* returns x raised to the power of y */
  assert y &gt;= 0
  new r = 1
  for (new i = 0; i &lt; y; i++)
    r *= x
  return r
}</pre>
<h5>Function arguments (call-by-value versus call-by-reference)</h5>
The "faculty" function in the next program has one parameter which it uses in a loop to calculate the faculty of that number. What deserves attention is that the function modifies its argument. [<i>Console functions are not available to GUN-TACTYX scripts</i>]
<pre>/* Calculation of the faculty of a value */
#include &quot;console&quot;
main() {
  print(&quot;Enter a value: &quot;)
  new v = getvalue()
  new f = faculty(v)
  printf(&quot;The faculty of %d is %d^n&quot;, v, f)
}
faculty(n) {
  assert n &gt;= 0
  new result = 1
  while (n &gt; 0)
    result *= n--
  return result
}</pre>
Whatever (positive) value that "n" had at the entry of the while loop in function faculty, "n" will be zero at the end of the loop. In the case of the faculty
function, the parameter is passed "by value", so the change of "n" is local to the faculty function. In other words, function main passes "v" as input to function faculty, but upon return of faculty, "v" still has the same value as before the function call.
<p>Arguments that occupy a single cell can be passed by value or by reference. The default is "pass by value". To create a function argument that is passed by reference, prefix the argument name with the character &amp;. Example:
<pre>swap(&amp;a, &amp;b) {
  new temp = b
  b = a
  a = temp
}</pre>
To pass an array to a function, append a pair of brackets to the argument name. You may optionally indicate the size of the array; doing so improves error checking of the parser. Example:
<pre>addvector(a[], const b[], size) {
  for (new i = 0; i &lt; size; i++)
    a[i] += b[i]
}</pre>
Arrays are always passed by reference. As a side note, array <i>b</i> in the above example does not change in the body of the function. The function argument has been declared as const to make this explicit. In addition to improving error checking, it also allows the SMALL parser to generate more efficient code.
<p>To pass an array of literals to a function, use the same syntax as for array initializer: a literal string or the series of array indices enclosed in braces (the ellipsis for progressive
initializer cannot be used). Literal arrays can only have a single dimension. The following snippet calls addvector to add 
five to every element of the array &quot;vect&quot;:
<pre>new vect[3] = { 1, 2, 3 }
addvector(vect, {5, 5, 5}, 3)
/* vect[] now holds the values 6, 7 and 8 */</pre>
[...]
<h5>Named parameters versus positional parameters</h5>
In the previous examples, the order of parameters of a function call was important, because each parameter is copied to the function argument with the same sequential position. For example, with the function weekday (which uses Zeller's congruence algorithm) defined as below, you call weekday(12,31,1999) to get the week day of the last day of this century.
<pre>weekday(month, day, year) {
/* returns the day of the week: 0=Saturday, 1=Sunday, etc. */
  if (month &lt;= 2)
    month += 12, --year
  new j = year % 100
  new e = year / 100
  return (day + (month+1)*26/10 + j + j/4 + e/4 - 2*e) % 7
}</pre>
Date formats vary according to culture and nation. While the format month/day/year is common in the United States of America, European countries often use the day/month/year format, and technical publications sometimes standardize on the year/month/day format. In other words, no order of arguments in the weekday function is "logical" or "conventional". That being the case, the alternative way to pass parameters to a function is to use "named parameters", as in the next examples (the three function calls are equivalent):
<pre>new wkday1 = weekday( .month = 12, .day = 31, .year = 1999)
new wkday2 = weekday( .day = 31, .month = 12, .year = 1999)
new wkday3 = weekday( .year = 1999, .month = 12, .day = 31)</pre>
With named parameters, a period (".") precedes the name of the function argument. The function argument can be set to any expression that is valid for
the argument. The equal sign ("=") does in the case of a named parameter not indicate an assignment; rather it links the expression that follows the equal sign to one of the function arguments.
<p>One may mix positional parameters and named parameters in a function call with the restriction that all positional parameters must precede any named parameters.
<h5>Default values of function arguments</h5>
A function argument may have a default value. The default value for a function argument must be a constant. To specify a default value, append the equal sign ("=") and the value to the argument name. When the function call specifies an argument placeholder instead of a valid argument, the default value applies. The argument placeholder is the underscore character (_). The argument placeholder is only valid for function arguments that have a default value. If the rightmost argument placeholder may simply be stripped from the function argument list. For example, if function increment is defined as:
<pre>increment(&amp;value, incr=1) value += incr</pre>
the following function calls are all equivalent:
<pre>increment(a)
increment(a, _)
increment(a, 1)</pre>
Default argument values for passed-by-reference arguments are useful to make the input argument optional. For example, if the function <i>divmod</i> is designed to return both the quotient and the remainder of a division operation through its arguments, default values make these arguments optional:
<pre>divmod(a, b, &amp;quotient=0, &amp;remainder=0) {
  quotient = a / b
  remainder = a % b
}</pre>
With the preceding definition of function <i>divmod</i>, the following function calls are now all valid:
<pre>new p, q
divmod(10, 3, p, q)
divmod(10, 3, p, _)
divmod(10, 3, _, q)
divmod(10, 3, p)</pre>
Default arguments for array arguments are often convenient to set a default string or prompt to a function that receives a string argument. For example:
<pre>print_error(const message[], const title[] = &quot;Error: &quot;) {
  print(title)
  print(message)
  print(&quot;^n&quot;)
}</pre>
The next example adds the fields of one array to another array, and by default increments the first three elements of the destination array by one:
<pre>addvector(a[], const b[] = {1, 1, 1}, size = 3) {
  for (new i = 0; i &lt; size; i++)
    a[i] += b[i]
}</pre>
<h5><b>sizeof</b> operator and default function arguments</h5>
A default value of a function argument must be a constant, and its value is determined at the point of the function's declaration. Using the "sizeof" operator to set the default value of a function argument is a special case: the calculation of the value of the sizeof expression is delayed to the point of the function call and it takes the size of the actual argument rather than that of the formal argument. When the function is used several times in a program, with different arguments, the outcome of the "sizeof" expression is potentially different at every call - which means that the "default value" of the function argument may change. [...]
<h5>Arguments with tag names</h5>
A tag optionally precedes a function argument. Using tags improves the compile-time error checking of the script and it serves as "implicit
documentation- of the function. For example, a function that computes the square root of an input value in floating point precision may require that the input parameter is a floating point value and that the result is floating point as well. [...]
<pre>float:sqrt(float:arg);</pre>
In the case of an array, the array indices can be tagged as well. For example, a function that creates the intersection of two rectangles (the rectangle tag is defined in a previous example) may be written as:
<pre>intersection(dest[rectangle], const first[rectangle], const second[rectangle]) {
  if (
    first[right] &gt; second[left] &amp;&amp; first[left] &lt; second[right]
    &amp;&amp; first[bottom] &gt; second[top] &amp;&amp; first[top] &lt; second[bottom]
  ) {
/* there is an intersection, calculate it using the &quot;min&quot; and &quot;max&quot; functions */
    dest[left] = max(first[left], second[left])
    dest[right] = min(first[right], second[right])
    dest[top] = max(first[top], second[top])
    dest[bottom] = min(first[bottom], second[bottom])
    return true
  } else {
/* &quot;first&quot; and &quot;second&quot; do not intersect */
    dest = { 0, 0, 0, 0 }
    return false
  }
}</pre>
<h5>Variable arguments</h5>
A function that takes a variable number of arguments, uses the "ellipsis" operator ("...") in the function header to denote the position of the first variable
argument. The function can access the arguments with the predefined functions <i>numargs</i>, <i>getarg</i> and <i>setarg</i>. [<i>For example</i>] Function <i>sum</i> returns the summation of all of its parameters. It uses a variable length parameter list.
<pre>sum(...) {
  new result = 0
  for (new i = 0; i &lt; numargs(); ++i)
    result += getarg(i)
  return result
}</pre>
This function could be used in:
<pre>new v = sum(1, 2, 3, 4, 5)</pre>
A tag may precede the ellipsis to enforce that all subsequent parameters have the same tag, but otherwise there is no error checking with a variable argument list and this feature should therefore be used with caution.
<h5>Coercion rules</h5>
If the function argument, as per the function definition (or its declaration), is a "value parameter", the caller can pass as a parameter to the function:
<ul>
<li>a value, which is passed by value;
<li>a reference, whose dereferenced value is passed;
<li>an (indexed) array element, which is a value.
</ul>
If the function argument is a reference, the caller can pass to the function:
<ul>
<li>a value, whose address is passed;
<li>a reference, which is passed by value because it has the type that the function expects;
<li>an (indexed) array element, which is a value.
</ul>
If the function argument is an array, the caller can pass to the function:
<ul>
<li>an array with the same dimensions, whose starting address is passed;
<li>an (indexed) array element, in which case the address of the element is passed.
</ul>
<h5>Recursion</h5>
A faculty example function earlier in this chapter used a simple loop. An example function that calculated a number from the Fibonacci series also used a loop and an extra variable to do the trick. These two functions are the most popular routines to illustrate recursive functions, so by implementing these as iterative procedures, you might be inclined to think that SMALL does not support recursion.
Well, SMALL does support recursion, but the calculation of faculties and of Fibonacci numbers happen to be good examples of when not to use recursion.
Faculty is easier to understand with a loop than it is with recursion. Solving Fibonacci numbers by recursion indeed simplifies the problem, but at the cost of being extremely inefficient: the recursive Fibonacci calculates the same values over and over again. [...]
<h5>Forward declarations</h5>
The current "reference implementation" of the SMALL compiler does not require functions to be declared before their first use. This section documents the requirements of early implementations of the SMALL compiler and of other implementations of the SMALL language (if they exist).
<p>A SMALL parser may require that functions are defined before they can be used. That is, the implementation of the function must precede the 
first call to that function in the source file. In the cases that this is inconvenient, or impossible (as in the case of indirect recursion), you can make a "forward declaration" of the function. Forward declarations are similar, in syntax and in purpose, to declarations of native functions.
<p>To create a forward declaration, precede the function name and its parameter list with the keyword <b>forward</b>. For compatibility with early versions of SMALL, and for similarity with C/C++, an alternative way to forwardly declare a function is by typing the function header and terminating it with a semicolon (which follows the closing parenthesis of the parameter list). The full definition of the function, with a non-empty body, is implemented else-
where in the source file.
<h5>Public functions, function main</h5>
A stand-alone program must have the function <i>main</i>. This function is the starting point of the program. The function main may not have arguments.
A function library need not to have a main function, but it must have it either a main function, or at least one public function. Function main is the primary
entry point into the compiled program; the public functions are alternative entry points to the program. The virtual machine can start execution with one of the public functions. A function library may have a main function to perform one-time initialization at startup.
<p>To make a function public, prefix the function name with the keyword <b>public</b>. [...] Functions whose name starts with the "@" symbol are also public. [...] The "@" character, when used, becomes part of the function name. [...]
<h5>Static functions</h5>
When the function name is prefixed with the keyword <b>static</b>, the scope of the function is restricted to the file that the function resides in.
<h5>Stock functions</h5>
A "stock" function is a function that the SMALL parser must "plug into" the program when it is used, and that it may simply "remove" from the program (without warning) when it is not used. Stock functions allow a compiler or interpreter to optimize the memory footprint and the file size of a (compiled) SMALL program: any stock function that is not referred to, is completely skipped |as if it were lacking from the source file).
<p>A typical use of stock functions, hence, is in the creation of a set of "library" functions. A collection of general purpose functions, all marked as "stock" may be put in a separate include file, which is then included in any SMALL script. Only the library functions that are actually used get "linked" in.
To declare a stock function, prefix the function name with the keyword <b>stock</b>. Public functions and native functions cannot be declared "stock".
<p>When a stock function calls other functions, it is usually a good practice to declare those other functions as "stock" too |with the exception of native functions). Similarly, any global variables that are used by a stock function should in most cases also be defined "stock". The removal of unused (stock) functions can cause a chain reaction in which other functions and global variables are not longer accessed either. Those functions are then removed as well, thereby continuing the chain reaction until only the functions that are used, directly or indirectly, remain.
<h5>Native functions</h5>
A SMALL program can call application-specific functions through a "native function". The native function must be declared in the SMALL program by means of a function prototype. The function name must be preceded by the keyword <b>native</b>. [...]
<h5>User defined operators</h5>
The only data type of SMALL is a "cell", typically a 32-bit number or bit pattern. The meaning of a value in a cell depends on the particular application |it need not always be a signed integer value. SMALL allows to attach a "meaning" to a cell with its "tag" mechanism. Based on tags, SMALL also allows you to redefine operators for cells with a specific purpose. [...] User defined operators are merely a notational convenience. The same effect is achieved by calling functions explicitly. The definition of an operator is similar to the definition of a function, with the difference that the name of the operator is composed by the keyword "operator" and the character of the operator itself. [...] An operator function for a binary operator must have two arguments, one for an unary operator must have one argument. Note that the binary - operator adds the two values together after inverting the sign of the second operand. The subtraction operator thereby refers to both the user defined "negation" (unary -) and addition operators. A redefined operator must adhere to the following restrictions:
<ul>
<li> Only the following operators may be redefined: +, -, *, /, %, ++, --, ==, !=, &lt;, &gt;, &lt;=, &gt;=, and !. That is, the sets of arithmetic and relational operators can be overloaded, but the bitwise operators, the logical operators and the assignment operator cannot. The ! operator is a special case.
<li>You cannot invent new operators; you cannot define operator # for example.
<li>The precedence level and associativity of the operators, as well as their "arity" remain as defined. You cannot make an unary + operator, for example.
<li>The return tag of the relational operators and of the ! operator must be bool.
<li>The return tag of the arithmetic operators is at your choosing, but you cannot redefine an operator that is identical to another operator except for its return tag. For example, you cannot make both
<pre>alpha: operator+(alpha: a, alpha: b)</pre>
and
<pre>beta: operator+(alpha: a, alpha: b).</pre>
<li>SMALL already defines operators to work on untagged cells, you cannot redefine the operators with only arguments without tags.
<li>The arguments of the operator function must be a non-array passed by value. You cannot make an operator work on arrays.
</ul>
[...] Both arguments of the binary operators [<i>could not</i>] have the same tag. [...] You may, for example, define a binary + operator that adds an integer value to a "float" number. Basically, the operation of the SMALL parser is to check the
tag(s) of the operand(s) that the operator works on and to look up whether a user defined operator exists for the combination of the operator and the
tag(s). However, the parser recognizes special situations and provides the following features:
<ul>
<li>The parser recognizes operators like += as a sequence of + and = and it will call a user defined operator + if available. [...]
<li>The parser recognizes commutative operators (+, *, ==, and !=) and it will swap the operands of a commutative operator if that produces a fit with a user defined operator. [...]
<li>Prefix and postfix operators are handled automatically. You only need to define one user operator for the ++ and -- operators for a tag.
<li>The parser calls the ! operator implicitly in case of a test without explicit comparison. For example, in the statement "if
  (var) ..." when &quot;var&quot; has
tag "float", the user defined operator ! will be called for var. The ! operator thus doubles as a "test for zero" operator. [...]
<li>If you wish to forbid an operation, you can "forward declare" the operator without ever defining it. This will flag an error when the user defined operator is invoked. For example, to forbid the % operator (remainder after division) on floating point values, you can add the line:
<pre>forward float: operator%(float: a, float: b)</pre>
</ul>
User defined operators can optionally be declared "stock" or "native". In the case of a native operator function, the definition should include an external name. For example (when, on the host's side, the native function is called
float_add):
<pre>native float: operator+(float: val, float: val) = float_add</pre>
<h5>Floating point [...] arithmetic</h5>
SMALL only has intrinsic support for integer arithmetic (integer numbers are numbers without a fractional part). Support for floating point arithmetic [...] must be implemented through (native) functions [<i>GUN-TACTYX scripts already have this support enabled</i>]. User operators, then, allow a more natural notation of expressions with [...] floating point numbers.
<p>The SMALL parser has support for literal values with a fractional part, which it calls "rational numbers". Support for rational literals must be enabled explicitly with a #pragma [<i>GUN-TACTYX scripts already have this pragma enabled in the include files</i>]. The #pragma indicates how the rational numbers must be stored [...]

<p><a href=#index>Index</a><hr>
<a name=parti4><h4>1.4 General Syntax</h4></a>

<h5>Format</h5>
Identifiers, numbers and tokens are separated by spaces, tabs, carriage returns and "form feeds". Series of one or more of these separators are called white space.
<h5>Optional semicolons</h5>
Semicolons (to end a statement) are optional if they occur at the end of a line. Semicolons are required to separate multiple statements on a single line. An expression may still wrap over multiple lines, however postfix operators (++, -- and char) must appear on the same line as their operand.
<h5>Comments</h5>
Text between the tokens /* and */ (both tokens may be at the same line or at different lines) and text behind // (up to the end of the line) is a programming comment. The parser treats a comment as white space. Comments may not be nested.
<h5>Identifiers</h5>
Names of variables, functions and constants. Identifiers consist of the characters a: : :z, A: : :Z, 0: : :9, _ or @; the first character may not be a digit. The characters @ and _ by themselves are not valid identifiers, i.e. "_Up" is a valid identifier, but "_" is not.
<p>SMALL is case sensitive.
<p>A parser may truncate an identifier after a maximum length. The number of significant characters is implementation defined, but should be at least 16 characters.
<h5>Reserved words (keywords)</h5>
<i>Statements</i>; assert, break, case, continue, default, do, else, exit. for, goto, if, return, sleep, switch, while
<br><i>Operators</i>: char, defined, sizeof
<br><i>Directives</i>: #assert, #else, #emit, #endif, #endinput, #endscript, #if, #include
<br><i>Other</i>: const, enum, forward, native, new, operator, public, static, stock
<p>Next to reserved words, SMALL also has several predefined constants, you cannot use the symbol names of the predefined constants for variable or function names.
<h5>Constants (literals)</h5>
<ul>
<li><b>Integer numeric constants</b>
<ul>
<li><b>binary</b> 0b followed by a series of the digits 0 and 1.
<li><b>decimal</b> a series of digits between 0 and 9.
<li><b>hexadecimal</b> 0x followed by a series of digits between 0 and 9 and the letters a to f.
<li>In all number radices, and underscore may be used to separate groups of (hexa-)decimal digits.  Underscore characters between the digits are ignored.<br>
</ul>
<li><b>Rational number constants</b>
<ul>
<li>A rational number is a number with a fractional part. A rational number starts with one or more digits, contains a decimal point and has at least one digit following the decimal point. For example, "12.0" and "0.75" are valid rational numbers. Optionally, an exponent may be appended to the rational number; the exponent notation is the letter e (lower case) followed by a signed integer numeric constant. For example, "3.12e4" is a valid rational number with an exponent. [...]<br>
</ul>
<li><b>Character constants</b>
<ul>
<li>A single ASCII character surrounded by single quotes is a character constant (for example: 'a', '7', '$'). Character constants are assumed to be numeric constants.
<p><b>Control characters</b>
<br>'^a' Audible alarm (beep)
<br>'^b' Backspace
<br>'^e' Escape
<br>'^f' Formfeed
<br>'^n' Newline
<br>'^r' Carriage Return
<br>'^t' Horizontal tab
<br>'^v' Vertical tab
<br>'^^' ^ the caret itself
<br>'^'' ' single quote
<br>'^"' " double quote
<br>'^ddd;' character code with decimal code &quot;ddd&quot;
<p>The semicolon after the ^ddd; code is optional. Its purpose is to give the control character sequence an explicit termination symbol when it is used in a string constant. The caret ("^") is the default control character. You can set a different control character with the <i>#pragma ctrlchar</i> directive<br>
</ul>
<li><b>String constants</b>
<ul>
<li>String constants are assumed to be arrays with a size that is sufficient to hold all characters plus a terminating 0. Each string is stored at a unique position in memory; there is no elimination of duplicate strings.
<p>An unpacked string is a series of zero or more ASCII characters surrounded by double quotes [<i>with a ! as prefix - GUN-TACTYX use this notation, while standard SMALL use the opposite one</i>]. Each array element contains a single character.
<pre>unpacked string constant:
!&quot;the quick brown fox...&quot;</pre>
<p>A packed string literal follows the syntax for an unpacked string, but a "!" [<i>does not</i>] precedes the first double quote.
<pre>packed string constant:
&quot;...packed and sacked the lazy dog&quot;</pre>
<p>The syntax for packed literal strings and unpacked literal strings can be swapped with the #pragma pack directive [<i>as GUN-TACTYX does for default</i>].
<p>In the case of a packed string, the parser packs as many characters in a cell as will fit. A character is not addressable as a single unit, instead each element of the array contains multiple characters.
The first character in a "pack" occupies the highest bits of the array element. In environments that store memory words with the high byte at the lower address (Big Endian, or Motorola format), the individual characters are stored in the memory cells in the same order as they are in the string. A packed string ends with a zero character and the string is padded (with zero bytes) to a multiple of cells.
<p>Control characters may be used within strings.<br>
</ul>
<li><b>Array constants</b>
<ul>
<li>A series of numeric constants between braces is an array constant. Array constants can be used to initialize array variables with and they can be passed as function arguments.
</ul>
</ul>
<h5>Symbolic constants</h5>
A source file declares symbolic constants with the <b>const</b> and the <b>enum</b> instructions. The <i>const</i> keyword declares a single constant and the <i>enum</i> defines a list of |usually| sequential constants sharing the same tag name.
<pre><b>const</b> identifier = constant expression</pre>
Creates a symbolic constant with the value of the constant expression on the right hand of the assignment operator. The constant can be used at any place where a literal number is valid (for example: in expressions, in array declarations and in directives like "#if" and "#assert").
<pre><b>enum</b> name { constant list }</pre>
The <i>enum</i> instruction creates a series of constants with incrementing values. The constant list is a series of
identifiers separated by commas. Unless overruled, the first constant of an <i>enum</i> list has
the value 0 and every subsequent constant has the value of its predecessor plus 1.
<p>Both the value of a constant and the increment value can be set by appending the value to the constant's identifier. To set a value, use
<pre>name = value</pre>
in the constant list. To set the increment, use:
<pre>name : increment</pre>
The increment value is reset to 1 after every constant symbol declaration in the constant list.
<p>If both an increment and a value should be set for a constant, the increment (":" notation) should precede the value ("=" notation).
<p>The name token that follows the <i>enum</i> keyword is optional. If it is included, this name is used as the tag name for every symbol in the constant list. In addition, the <i>enum</i> command creates an extra constant with name for the constant name and the tag name. The value of the last constant is the value of the last symbol in the constant list plus the increment value of that last constant. The symbols in the constant list may not be tagged.
<p>A symbolic constant that is defined locally, is valid throughout the block. A local symbolic constant may not have the same name as a variable (local or global), a function, or another constant (local or global).
<h5>Predefined constants</h5>
<b>false</b> 0 (this constant is tagged as bool:)
<br><b>true</b> 1 (this constant is tagged as bool:)
<br><b>cellbits</b> The size of a cell in bits; usually 32.
<br><b>cellmax</b> The largest valid positive value that a cell can hold; usually 2147483647.
<br><b>cellmin</b> The largest valid negative value that a cell can hold; usually -2147483648.
<br><b>charbits</b> The size of a character in bits; 8 when using the ASCII or ISO Latin-1 characters sets and 16 when using the Unicode character set.
<br><b>charmax</b> The largest valid character value; 255 for 8-bit characters and 65535 for 16-bit characters.
<br><b>charmin</b> The smallest valid character value, currently set at zero (0).
<br><b>debug</b> One (1) if the compiler generates code for assertions and run-time bounds checking, zero (0) otherwise.
<br><b>_Small</b> The version number of the SMALL compiler scaled by 100 (that is, for version 1.8 the constant is "180").
<h5>Tag names</h5>
A tag consists of an identifier followed by a colon. There may be no white space between the identifier and the colon.
<h5>Predefined tag names</h5>
<b>bool</b> For "true/false" flags. The predefined constants <i>true</i> and <i>false</i> have this tag.
[...]
<br><b>float</b> Rational numbers typically have this tag when floating point support is enabled [<i>by default for GUN-TACTYX scripts</i>].

<p><a href=#index>Index</a><hr>
<a name=parti5><h4>1.5 Operators and Expressions</h4></a>

<h5>Notational conventions</h5>
The operation of some operators depends on the specific kinds of operands. Therefore, operands are notated thus:
<br><b>e</b> any expression;
<br><b>v</b> any expression to which a value can be assigned ("lvalue" expressions);
<br><b>a</b> an array;
<br><b>f</b> a function.
<h5>Expressions</h5>
An expression consists of one or more operands with an operator. The operand can be a variable, a constant or another expression. An expression followed by a semicolon is a statement. Examples of expressions:
<pre>v++
f(a1, a2)
v = (ia1 * ia2) / ia3</pre>
<h5>Arithmetic</h5>
<pre>e1+e2</pre>
Results in the addition of e1 and e2.
<pre>e1-e2</pre>
Results in the subtraction of e1 and e2.
<pre>-e</pre>
Results in the arithmetic negation of a (two's complement).
<pre>e1*e2</pre>
Results in the multiplication of e1 and e2.
<pre>e1/e2</pre>
Results in the division of e1 by e2. The result is truncated to the nearest integral value that is less than or equal to the quotient. Both negative and positive values are rounded towards -1.
<pre>e1%e2</pre>
Results in the modulus (remainder of the division) of e1 by e2. The modulus is always a positive value.
<pre>v++</pre>
increments v by 1; results in the value of v before it is incremented.
<pre>++v</pre>
increments v by 1; results in the value of v after it is incremented.
<pre>v--</pre>
decrements v by 1; results in the value of v before it is decremented.
<pre>--v</pre>
decrements v by 1; results in the value of v after it is decremented.
<p>Notes: The unary + is not defined in SMALL. The operators ++ and -- modify the operand. The operand must be an lvalue.
<h5>Bit manipulation</h5>
<pre>~e</pre>
results in the one's complement of e.
<pre>e1 &gt;&gt; e2</pre>
results in the arithmetic shift to the right of e1 by e2 bits. The shift operation is signed: the leftmost bit of e1 is copied to vacant bits in the result.
<pre>e1 &gt;&gt;&gt; e2</pre>
results in the logical shift to the right of e1 by e2 bits. The shift operation is unsigned: the vacant bits of the result are filled with zeros.
<pre>e1 &lt;&lt; e2</pre>
results in the value of e1 shifted to the left by e2 bits; the rightmost bits are set to zero. There is no distinction between an arithmetic and a logical left shift
<pre>e1&amp;e2</pre>
results in the bitwise logical "and" of e1 and e2. 
<pre>e1|e2</pre>
results in the bitwise logical "or" of e1 and e2.
<pre>e1 ^ e2</pre>
results in the bitwise "exclusive or" of e1 and e2.
<h5>Assignment</h5>
The result of an assignment expression is the value of the left operand after the assignment. The left operand may not be tagged.
<pre>v = e</pre>
assigns the value of e to variable v.
<p>If "v" is an array, it must have an explicit size and "e" must be an array of the same size; "e" may be a string or a literal array.
<p>Note: the following operators combine an assignment with an arithmetic or a bitwise operation; the result of the expression is the value of the left operand after the arithmetic or bitwise operation.
<pre>v += e</pre>
increments v with a.
<pre>v -= e</pre>
decrements v with e
<pre>v *= e</pre>
multiplies v with e
<pre>v /= e</pre>
divides v by e.
<pre>v %= e</pre>
assigns the remainder of the division of v by e to v.
<pre>v &gt;&gt;= e</pre>
shifts v arithmetically to the right by e bits.
<pre>v &gt;&gt;&gt;= e</pre>
shifts v logically to the right by e bits.
<pre>v &lt;&lt;= e</pre>
shifts v to the left by e bits.
<pre>v &amp;= e</pre>
applies a bitwise "and" to v and e and assigns the result to v.
<pre>v |= e</pre>
applies a bitwise "or" to v and e and assigns the result to v.
<pre>v^= e</pre>
applies a bitwise "exclusive or" to v and e and assigns the result to v.
<h5>Relational</h5>
A logical "false" is represented by an integer value of 0; a logical "true" is represented by any value other than 0. Value results of relational expressions are either 0 or 1, and their tag is set to "bool".
<pre>e1 == e2</pre>
results in a logical "true" if e1 is equal to e2.
<pre>e1 != e2</pre>
results in a logical "true" if e1 differs from e2.
<p>Note: the following operators may be "chained", as in the expression "e1 &lt;= e2 &lt;= e3", with the semantics that the result is "1" if all individual comparisons hold and "0" otherwise.
<pre>e1&lt;e2</pre>
results in a logical "true" if e1 is smaller than e2.
<pre>e1 &lt;= e2</pre>
results in a logical "true" if e1 is smaller than or equal to e2.
<pre>e1&gt;e2</pre>
results in a logical "true" if e1 is greater than e2.
<pre>e1 &gt;= e2</pre>
results in a logical "true" if e1 is greater than or equal to e2.
<h5>Boolean</h5>
A logical "false" is represented by an integer value of 0; a logical "true" is represented by any value other than 0. Value results of Boolean expressions are either 0 or 1, and their tag is set to "bool".
<pre>!e</pre>
results to a logical "true" if e was logically "false".
<pre>e1 || e2</pre>
results to a logical "true" if either e1 or e2 (or both) are logically "true". The expression e2 is only evaluated if e1 is logically "false".
<pre>e1 &amp;&amp; e2</pre>
results to a logical "true" if both e1 and e2 are logically "true". The expression e2 is only evaluated if e1 is logically "true".
<h5>Miscellaneous</h5>
<pre>a[e]</pre>
array index: results to cell e from array a.
<pre>a{e}</pre>
array index: results to character e from "packed" array a.
<pre>f(e1,e2,...eN)</pre>
results to the value returned by the function f. The function is called with the arguments e1, e2, : : :
eN. The order of evaluation of the arguments is undefined (an implementation may choose to evaluate function arguments in reversed order).
<pre>e1 ? e2 : e3</pre>
results in either e2 or e3, depending on the value of e1. The conditional expression is a compound expression with a two part operator, ? and :. Expression e2 is evaluated if e1 is logically "true",
e3 is evaluated if e1 is logically "false".
<pre>tagname: e</pre>
tag override; the value of the expression e does not change, but its tag changes.
<pre>e1, e2</pre>
results in e2, e1 is evaluated before e2. If used in function argument lists or a conditional expression, the comma expression must be surrounded by parentheses.
<pre>defined</pre>
results in the value 1 if the symbol is defined. The symbol may be a constant, or a global or local variable.
<pre>sizeof</pre>
results in the size in cells of the specified variable. If the size of a variable is unknown, the result is zero.
<pre>e char</pre>
results the number of cells that are needed to hold a packed array of e characters.
<h5>Operator precedence</h5>
The table beneath groups operators with equal precedence, starting with the operator group with the highest precedence at the top of the table. If the expression evaluation order is not explicitly established by parentheses, it is determined by the association rules. For example: <i>a*b/c</i> is equivalent with <i>(a*b)/c</i> because of the left-to-right association, and <i>a=b=c</i> is equivalent with <i>a=(b=c)</i>.

<p><table border=1>
<tr><td>()</td><td> function </td><td>call left-to-right</tr>
<tr><td>[]</td><td colspan=2> array index (cell)</tr>
<tr><td>{}</td><td colspan=2> array index (character)</tr>

<tr><td>!</td><td> logical not </td><td>right-to-left</tr>
<tr><td>~</td><td colspan=2> one's complement</tr>
<tr><td>-</td><td colspan=2> two's complement (unary minus)</tr>
<tr><td>++</td><td colspan=2> increment</tr>
<tr><td>--</td><td colspan=2> decrement</tr>
<tr><td>:</td><td colspan=2> tag override</tr>
<tr><td>char</td><td colspan=2> convert number of packed characters to cells</tr>
<tr><td>defined</td><td colspan=2> symbol definition status</tr>
<tr><td>sizeof</td><td colspan=2> symbol size in cells</tr>

<tr><td>*</td><td> multiplication </td><td>left-to-right</tr>
<tr><td>/</td><td colspan=2> division</tr>
<tr><td>%</td><td colspan=2> modulus</tr>

<tr><td>+</td><td> addition </td><td>left-to-right</tr>
<tr><td>-</td><td colspan=2> subtraction</tr>

<tr><td>&gt;&gt;</td><td> arithmetic shift right </td><td>left-to-right</tr>
<tr><td>&gt;&gt;&gt;</td><td colspan=2> logical shift right</tr>
<tr><td>&lt;&lt;</td><td colspan=2> shift left</tr>

<tr><td>&amp;</td><td> bitwise and </td><td>left-to-right</tr>

<tr><td>^</td><td> bitwise exclusive or </td><td>left-to-right</tr>

<tr><td>|</td><td> bitwise or </td><td>left-to-right</tr>

<tr><td>&lt;</td><td> smaller than </td><td>left-to-right</tr>
<tr><td>&lt;=</td><td colspan=2> smaller than or equal to</tr>
<tr><td>&gt;</td><td colspan=2> greater than</tr>
<tr><td>&gt;=</td><td colspan=2> greater than or equal to</tr>

<tr><td>==</td><td> equality </td><td>left-to-right</tr>
<tr><td>!=</td><td colspan=2> inequality</tr>

<tr><td>&amp;&amp;</td><td> logical and </td><td>left-to-right</tr>

<tr><td>||</td><td> logical or </td><td>left-to-right</tr>

<tr><td>? :</td><td> conditional </td><td>right-to-left</tr>

<tr><td>=</td><td> assignment </td><td>right-to-left</tr>
<tr><td colspan=3>*= /= %= += -= &gt;&gt;= &gt;&gt;&gt;= &lt;&lt;= &amp;= ^= |=</td></tr>

<tr><td>,</td><td> comma </td><td>left-to-right</tr>
</table>

<p><a href=#index>Index</a><hr>
<a name=parti6><h4>1.6 Statements</h4></a>

A statement may take one or more lines, whereas one line may contain two or more statements. Control flow statements (if, if-else, for, while, do-while and switch) may be nested.
<h5>Statement label</h5>
A label consists of an identifier followed by a colon (:). A label is a "jump target" of the goto statement. Each statement may be preceded by a label. There must be a statement after the label; an empty statement is allowed. The scope of a label is the function in which it is declared (a goto statement cannot therefore jump out off the current function to another function).
<h5>Compound statement</h5>
A compound statement is a series of zero or more statements surrounded by braces ({ and }). The final brace (}) should not be followed by a semicolon. Any statement may be replaced by a compound statement. A compound statement is also called a block. A compound statement with zero statements is a special case, and it is called an "empty statement".
<h5>Expression statement</h5>
Any expression becomes a statement when a semicolon (;) is appended to it. An expression also becomes a statement when only white space follows
it on the line and the expression cannot be extended over the next line.
<h5>Empty statement</h5>
An empty statement performs no operation and consists of a compound block with zero statements; that is, it consists of the tokens "{ }". Empty
statements are used in control flow statements if there is no action (e.g. <i>while
(!iskey()) {}</i>) or when defining a label just before the closing
brace of a compound statement. An empty statement does not end with a semicolon.
<h5>assert <i>expression</i></h5>
Aborts the program with a run-time error if the expression evaluates to logically "false".
<h5>break</h5>
Terminates and exits the smallest enclosing <i>do</i>, <i>for</i> or <i>while</i> statement any point within the loop other than the logical end. The <i>break</i> statement moves program control to the next statement outside the loop.
<h5>continue</h5>
Terminates the current iteration of the smallest enclosing <i>do</i>, <i>for</i> or <i>while</i> statement and moves program control to the condition part of the loop. If the looping statement is a <i>for</i> statement, control moves to the third expression in the <i>for</i> statement (and thereafter to the second expression).
<h5>do <i>statement</i> while ( <i>expression</i> )</h5>
Executes a statement before the condition part (the <i>while</i> clause) is evaluated. The statement is repeated while the condition is logically "true".
The statement is at least executed once.
<h5>exit <i>expression</i></h5>
Abort the program. The expression is optional. If included, the exit instruction returns the expression value (plus the expression tag) to the host
application. The significance and purpose of exit codes is implementation defined.
<h5>for ( <i>expression 1</i> ; <i>expression 2</i> ; <i>expression 3</i> ) <i>statement</i></h5>
All three expressions are optional.
<ul>
<li><b>expression 1</b> Evaluated only once, and before entering the loop. This expression may be used to initialize a variable. This
  expression may also hold a variable declaration, using the new syntax. A variable declared in this expression exists only in the <i>for</i> loop.
<li><b>expression 2</b> Evaluated before each iteration of the loop and ends the loop if the expression results to logically "false". If omitted, the
result of expression 2 is assumed to be logically "true".
<li><b>expression 3</b> Evaluated after each execution of the statement. Program control moves from expression 3 to expression 2 for the next
(conditional) iteration of the loop.
</ul>
The statement <i>for( ; ; )</i> is equivalent with <i>while (true)</i>.
<h5>goto <i>label</i></h5>
Moves program control (unconditionally) to the statement that follows the specified label. The label must be within the same function as the
<i>goto</i> statement (a <i>goto</i> statement cannot jump out of a function).
<h5>if ( <i>expression</i> ) <i>statement 1</i> else <i>statement 2</i></h5>
Executes statement 1 if the expression results to logically "true". The <i>else</i> clause of the <i>if</i> statement is optional. If the expression results to
logically "false" and an <i>else</i> clause exists, the statement associated with the <i>else</i> clause (statement 2) executes.
<p>When <i>if</i> statements are nested and <i>else</i> clauses are present, a given <i>else</i> is associated with the closest preceding <i>if</i> statement in the same block.
<h5>return <i>expression</i></h5>
Terminates the current function and moves program control to the statement following the calling statement. The expression is optional, but if it is included the value of the expression is returned as the function result.
<h5>sleep <i>expression</i></h5>
Abort the program, but leave it in a restartable state. The expression is optional. If included, the <i>sleep</i> instruction returns the expression
value (plus the expression tag) to the host application. The significance and purpose of exit codes/tags is implementation defined; typically, an
application uses the sleep instruction to allow for light-weight multitasking of several concurrent SMALL programs, or to implement "latent"
functions.
<h5>switch ( <i>expression</i> ) { <i>case list</i> }</h5>
Transfers control to different statements within the switch body depending on the value of the switch expression. The body of the switch statement is a compound statement, which contains a series of "case clauses". Each "case clause" starts with the keyword <i>case</i> followed by a constant
list and one statement. The constant list is a series of expressions, separated by comma's, that each evaluates to a constant value. The constant
list ends with a colon. To specify a "range" in the constant list, separate the lower and upper bounds of the range with a double period (".."). An
example of a range is: "case 1..9:". The switch statement moves control to a "case clause" if the value of one of the expressions in the constant list is equal to the switch expression result.
<p>The "default clause" consists of the keyword <i>default</i> and a colon. The default clause is optional, but if it is included, it must be the last clause
in the switch body. The switch statement moves control to the "default clause" is executed if none of the case clauses match the expression result. Example:
<pre>switch (weekday(12,31,1999)) {
  case 0, 1: /* 0 == Saturday, 1 == Sunday */
    print(&quot;weekend&quot;)
  case 2:
    print(&quot;Monday&quot;)
  case 3:
    print(&quot;Tuesday&quot;)
  case 4:
    print(&quot;Wednesday&quot;)
  case 5:
    print(&quot;Thursday&quot;)
  case 6:
    print(&quot;Friday&quot;)
  default:
    print(&quot;invalid week day&quot;)
}</pre>
[<i>Difference from C: <b>break</b> keyword is not used to end the code of a case</i>]
<h5>while ( <i>expression</i> ) <i>statement</i></h5>
Evaluates the expression and executes the statement if the expression result yields logically "true". After the statement has executed, program
control returns to the expression again. The statement is thus executed while the expression is true.

<p><a href=#index>Index</a><hr>
<a name=parti7><h4>1.7 Directives</h4></a>

All directives must appear first on a line (they may be preceded by white space, but not by any other characters). All directives start with the character # and the complete instruction may not span more than one line.
<h5>#assert <i>constant expression</i></h5>
Issues a compile time error if the supplied constant expression evaluates to zero. The #assert directive is most useful to guard against implementation defined constructs on which a program may depend, such as the cell size in bits, or the number of packed characters per cell.
<h5>#emit <i>opcode, parameters</i></h5>
The #emit directive serves as an inline assembler. It is currently used only for testing the abstract machine.
<h5>#endinput</h5>
Closes the current file and thereby ignores all the text below the #endinput directive.
<h5>#include "filename" [...]</h5>
Inserts the contents of the specified file at the current position within the current file. The proposed default extension of include files is ".INC".
<h5>#if <i>constant expression</i>, #else, #endif</h5>
Portions of a program may be parsed or be ignored depending on certain conditions. The SMALL parser (compiler or interpreter) generates code
only for those portions for which the condition is true. The directive #if must be followed by a constant expression. To check whether a variable or constant is defined, use the defined operator. The #else directive reverses the parsing state. If the parser ignored lines up to the directive, it starts parsing and if it parsed lines, it stops parsing. There should only be one #else associated with each #if, but a SMALL parser need not impose this restriction. The #endif directive terminates a program portion that is parsed conditionally. Conditional directives can be nested and each #if directive
must be ended by an #endif directive.
<h5>#pragma <i>extra information</i></h5>
A pragma is a hook for a parser to specify additional settings, such as warning levels or extra capabilities. Common pragmas are:
<pre>
#pragma ctrlchar <i>character</i>
</pre>
Defines the character to use to indicate a "control character". By default, the control character is "^".
<h5>#pragma dynamic <i>value</i></h5>
Sets the size, in cells, of the memory block for dynamic data (the stack and the heap) to the value specified by the expression. The default size of the dynamic data block is implementation defined. An implementation may also choose to grow the block on an as-needed basis. [<i>GUN-TACTYX fixes the amount of memory available to scripts to 32Kb</i>].
<h5>#pragma library <i>name</i></h5>
Sets the name of the (dynamically linked) library or module that contains required native functions.
<h5>#pragma pack <i>value</i></h5>
If value is zero, packed literal strings start with "!"" and unpacked literal strings with only a double quote ("""). If value is non-zero, the syntax for
packed and unpacked literal strings is swapped: literal strings that start with a double quote are packed and literal strings that start with "!"" are unpacked. [<i>The latter is the default
behavior in GUN-TACTYX scripts</i>]
<h5>#pragma rational <i>tagname(value)</i></h5>
Enables support for rational numbers. The tagname is the name pf the tag that rational numbers will have; typically one chooses the names "float" or "fixed". The value in
parentheses behind tagname is optional: if it is omitted, a rational number is stored as a "floating point" value according to the IEEE 754 norm; if it is present, a rational number is a fixed precision number ("scaled integer") with the specified number of decimals. [<i>GUN-TACTYX already calls this pragma directive in its include files to use floats</i>]
<h5>#pragma semicolon <i>value</i></h5>
If value is zero, no semicolon is required to end a statement if that statement is last on a line. Semicolons are still needed to separate multiple statements on the same line. When semicolons are optional (the default), a postfix operator (one of "++", "--" and "char") may not be the first token on a
line.
<h5>#pragma tabsize <i>value</i></h5>
The number of characters between two consecutive tab positions. The default value is 8. You may need to set the tab size to avoid warning 217 (loose indentation) if the source code is indented alternately with spaces and with tab characters. Alternatively, by setting the
&quot;tabsize&quot; pragma to zero, the parser will no longer issue warning 217.

<p><a href=#index>Index</a><hr>
<a name=parti8><h4>1.8 Pitfalls: Differences from C</h4></a>

<ul>
<li>SMALL lacks the typing mechanism of C. SMALL is an "integer-only" variety of C; there are no structures or unions, and floating point support must be implemented with user-defined operators and the help of native functions [<i>In GUN-TACTYX the floating point support is already implemented, but remember to use the point "." when a numeric constant must represent a floating point value: for example, "new float:value = 1.0" is correct, while "new float:value = 1" gives a tag mismatch warning during compilation</i>]
<li>The accepted syntax for rational numbers is quite a bit stricter than that of floating point values in C. Values like ".5" and "6." are acceptable in C, but
in SMALL one must write "0.5" and "6.0" respectively. In C, the decimal period is optional if an exponent is included, so one can write "2E8"; SMALL does not accept the upper case "E" (use a lower case "e") and it requires the decimal point: e.g. "2.0e8". See page 42 for more information.
<li>SMALL does not provide "pointers". For the purpose of passing function arguments by reference, SMALL provides a "reference" argument. The
"placeholder" argument replaces some uses of the NULL pointer.
<li>Numbers can have hexadecimal, decimal or binary radix. Octal radix is not supported. Hexadecimal numbers must start with "0x" (a lower case "x"), the prefix "0X" is invalid.
<li>The final dimension of a multi-dimensional array may have an unspecified length. In C, the  first dimension may have an unspecified length.
<li>Escape sequences (""n", ""t", etc.) are replaced by control characters. The main difference is that the caret ("^") replaces the backslash ("""). 
<li>Cases in a <i>switch</i> statement are not "fall through". Only a single instruction may (and must) follow each <i>case</i> label. To execute multiple instructions, you must use a compound statement. The <i>default</i> clause of a <i>switch</i> statement must be the last clause of the switch statement.
<li>A <i>break</i> statement breaks out of loops only. In C/C++, the <i>break</i> statement also ends a <i>case</i> in a <i>switch</i> statement. <i>Switch</i> statements are implemented differently in SMALL.
<li>SMALL supports "array assignment", with the restriction that both arrays must have the same size. For example, if "a" and "b" are both arrays with 6 cells, the expression "a = b" is valid. Next to literal strings, SMALL also supports literal arrays, allowing the expression "a = {0,1,2,3,4,5}" (where "a" is an array variable with 6 elements).
<li><i>char</i> is an operator, not a type.
<li><i>defined</i> is an operator, not a preprocessor directive. The <i>defined</i> operator in SMALL operates on constants (with <i>const</i> and <i>enum</i>), global variables, local variables and functions.
<li>The <i>sizeof</i> operator returns the size of a variable in "cells" (not in "bytes").
<li>The empty instruction is an empty compound block, not a semicolon. This modification avoids a frequent error.
<li>The compiler directives differ from C's preprocessor commands. Notably, the #define directive can only add numeric constants, and #ifdef and #ifndef
are replaced by the more general #if directive.
<li>The direction for truncation for the operator / is always towards the smaller value, where -2 is smaller than -1. The % operator always gives a positive result, regardless of the signs of the operands.
<li>There is no unary + operator, which is a "no-operation" operator anyway.
<li>Three of the bitwise operators have different precedence than in C. The precedence levels of the &amp;, ^ and | operators is higher than the relational operators (Dennis Ritchie explained that these operators got their low precedence levels in C because early C compilers did not yet have the logical &amp;&amp; and || operators, so the bitwise & and | were used instead).
<li>The "extern" keyword does not exist in SMALL; the current implementation of the compiler has no "linking phase". To create a program from several source files, create one main project script file that
  includes all other source files. The SMALL compiler can optimize out functions and global variables that you do not use.
<li>In most situations, forward declarations of functions (i.e., prototypes) are not necessary. SMALL is a two-pass compiler, it will see all functions on the 
first pass and use them in the second pass. If provided, forward declarations must match exactly with the function definition, parameter names may not be omitted from the prototype or differ from the function definition. SMALL cares about parameter names in prototypes because of the "named parameters" feature. One uses prototypes to call forwardly declared functions. When doing so with named parameters, the compiler must
already know the names of the parameters (and their position in the parameter list). As a result, the parameter names in a prototype must be equal to the
ones in the definition.
</ul>
[...]

<p><a href=#index>Index</a><hr>
<a name=parti9><h4>1.9 SMALL: The Compiler</h4></a>

The SMALL compiler is currently the only translator (or parser) that implements the SMALL language. The SMALL compiler translates a text file with source code to a binary file for an abstract machine. [...]
<h5>Usage</h5>
Assuming that the SMALL compiler is called  "sc.exe", the command line syntax is:
<pre>sc &lt;options&gt; [filename]</pre>
The input file name is any legal filename. If no extension is given, ".SMA" is assumed. The compiler creates an output file with, by default, the same name as the input  file and the extension ".AMX".
<h5>Options</h5>
The options are:
<ul>
<li><b>-a</b> "assembler", generate a text file with the pseudo-assembler code for the SMALL abstract machine, instead of binary code;
<li><b>-C</b> "compact encoding" of the binary file, which reduces the size a the output file typically to less than half the original size;
<li><b>-csize</b> set the character size, size must be 8 (for ASCII & ISO Latin-1) or 16 for Unicode;
<li><b>-Dpath</b> the "active" directory, where the compiler should search for its input files and store its output files (this option is not supported on every
platform);
<li><b>-dlevel</b> debug level: 0 = none, 1 = bounds checking and assertions only, 2 = full symbolic information, 3 = full symbolic information and optimizations
disabled;
<li><b>-ename</b> set the name of the error file (when set, there is no output to the screen);
<li><b>-iname</b> set the path to the include files;
<li><b>-oname</b> set the output filename and path;
<li><b>-P</b> set "packed strings" by default; use the !"..." syntax for unpacked
<li><b>-pname</b> the lename of the "prefix file", this is a file that is parsed before the input file (as a kind of implicit "include file");
<li><b>-Svalue</b> the size of the stack and the heap in cells;
<li><b>-svalue</b> the number of lines to skip in the input file before starting to compile;
<li><b>-tvalue</b> the "size" of a tab character, when set to zero (i.e. option -t0) the compiler will no longer issue warning 217 (loose indentation);
<li><b>-n</b> control characters start with "n" instead of "^" (for the sake of similarity with C);
<li><b>-;</b> semicolons are optional to end a statement if the statement is the last on the line (this is the default);
<li><b>-;+</b> semicolons are required, every statement must be terminated with a semicolon;
<li><b>sym=val</b> define constant "sym" with the given (numeric) value, the value is optional;
<li><b>@filename</b> read (more) options from the specified "response file". All options should be separated by at least one space. To support operating systems with a limited command line length (e.g., Microsoft DOS), the SMALL compiler supports "response files". A response file is a text file
that contains the options that you would otherwise put at the command line. With the command:
<pre>sc @opts.txt prog.sma</pre>
the SMALL compiler compiles the file &quot;prog.sma&quot; using the options that are listed in the response  file
  &quot;opts.txt&quot;.
</ul>
<h5>Configuration file</h5>
On platforms that support it (currently Microsoft DOS, Microsoft Windows and Linux), the compiler reads the options in a "configuration file" on startup. The configuration file must have the name
&quot;sc.cfg&quot; and it must reside in the same directory as the compiler executable program. In a sense, the configuration  file is an implicit response file. Options specified on the command line may overrule those in the configuration file.
<p>When the compiler finds an error in a file, it outputs a message giving, in this order:
<ul>
<li>the name of the file
<li>the line number were the compiler detected the error between parentheses, directly behind the filename
<li>the error class ("Error", "Fatal" or "Warning")
<li>an error number between square brackets
<li>a descriptive error message
</ul>
For example:
<pre>demo.c(3): Error [001]: expected token: &quot;;&quot;, but found &quot;{&quot;</pre>
If the "verbose" option is active, the erroneous line is displayed too.
<p>Note: the line number given by the compiler may specify a position behind the actual error, since the compiler cannot always establish an error before having analyzed the complete expression.
<p>After termination, the return code of the compiler is:
<br>0 no errors
<br>1 errors found
<br>2 warnings found
<br>3 aborted by user
These return codes may be checked within batch processors (such as the "make" utility).
<h5>Error categories</h5>
Errors are separated into three classes:
<br><b>Errors</b>: Describe situations where the compiler is unable to generate appropriate code. Errors messages are numbered from 1 to 99.
<br><b>Fatal errors</b>: Fatal errors describe errors from which the compiler cannot recover. Parsing is aborted. Fatal error messages are numbered
from 100 to 199.
<br><b>Warnings</b>: Warnings are displayed for unintended compiler assumptions and common mistakes. Warning messages are numbered from 200 to 299.
<h5>Errors</h5>
<h6>001 expected token: token, but found token</h6>
A required token is omitted.
<h6>002 only a single statement (or expression) can follow each "case"</h6>
Every case in a switch statement can hold exactly one statement. To put multiple statements in a case, enclose these statements between braces
(which creates a combound statement).
<h6>003 reserved</h6>
Reserved (unused) error message.
<h6>004 function name is not implemented</h6>
There is no implementation for the designated function. The function may have been "forwardly" declared |or prototyped| but the full function definition including a statement, or statement block, is missing.
<h6>005 function may not have arguments</h6>
The function main() is the program entry point. It may not have arguments.
<h6>006 must be assigned to an array</h6>
String literals or arrays must be assigned to an array. This error message may also indicate a missing index (or indices) at the array on the right
side of the "=" sign.
<h6>007 assertion failed</h6>
Compile-time assertion failed.
<h6>008 must be a constant expression; assumed zero</h6>
The size of arrays and the parameters of most directives must be constant values.
<h6>009 invalid array size (negative or zero)</h6>
The number of elements of an array must always be 1 or more.
<h6>010 illegal function or declaration</h6>
The compiler expects a declaration of a global variable or of a function at the current location, but it cannot interpret it as such.
<h6>011 invalid outside functions</h6>
The instruction or statement is invalid at a global level. Local labels and (compound) statements are only valid if used within functions.
<h6>012 invalid function call, not a valid address</h6>
The symbol is not a function.
<h6>013 no entry point (no public functions)</h6>
The file does not contain a main function or any public function. The compiled file thereby does not have a starting point for the execution.
<h6>014 invalid statement; not in switch</h6>
The statements case and default are only valid inside a switch statement.
<h6>015 "default" must be the last clause in switch statement</h6>
SMALL requires the default clause to be the last clause in a switch statement.
<h6>016 multiple defaults in "switch"</h6>
Each switch statement may only have one default clause.
<h6>017 undefined symbol symbol</h6>
The symbol (variable, constant or function) is not declared.
<h6>018 initialization data exceeds declared size</h6>
Initialization: 20 An array with a specified size is initialized, but the number of initiallers exceeds the number of elements specified (e.g. "arr[3]={1,2,3,4};" the array is specified to have three elements, but there are four
initiallers).
<h6>019 not a label: name</h6>
A goto statement branches to a symbol that is not a label.
<h6>020 invalid symbol name</h6>
A symbol may start with a letter, an underscore or an "at" sign ("@") and may be followed by a series of letters, digits, underscore characters
and "@" characters.
<h6>021 symbol already defined: identifier</h6>
The symbol was already defined at the current level.
<h6>022 must be lvalue (non-constant)</h6>
The symbol that is altered (incremented, decremented, assigned a value, etc.) must be a variable that can be modified (this kind of variable is
called an lvalue). Functions, string literals, arrays and constants are no lvalues. Variables declared with the "const" attribute are no lvalues
either.
<h6>023 array assignment must be simple assignment</h6>
When assigning one array to another, you cannot combine an arithmetic operation with the assignment (e.g., you cannot use the "+=" operator).
<h6>024 "break" or "continue" is out of context</h6>
The statements break and continue are only valid inside the context of a loop (a do, for or while statement). Unlike the languages C/C++
and Java, break does not jump out of a switch statement.
<h6>025 function heading differs from prototype</h6>
The number of arguments given at a previous declaration of the function does not match the number of arguments given at the current declaration.
<h6>026 no matching "#if..."</h6>
The directive #else or #endif was encountered, but no matching #if directive was found.
<h6>027 invalid character constant</h6>
Probably caused by an unknown control character, like "^x".
<h6>028 cannot subscript, not an array</h6>
The subscript operators "[" and "]" are only valid with arrays.
<h6>029 invalid expression, assumed zero</h6>
The compiler could not interpret the expression.
<h6>030 compound statement not closed at the end of file</h6>
An unexpected end of file occurred. One or more compound statements are still unfinished (i.e. the closing brace "g" has not been found).
<h6>031 unknown directive</h6>
The character "#" appears first at a line, but no valid directive was specified.
<h6>032 array index out of bounds</h6>
The array index is larger than the highest valid entry of the array.
<h6>033 array must be indexed (variable name)</h6>
An array as a whole cannot be used in a expression; you must indicate an element of the array between square brackets.
<h6>034 argument does not have a default value (argument index)</h6>
You can only use the argument placeholder when the function definition specifies a default value for the argument.
<h6>035 argument type mismatch (argument index)</h6>
The argument that you pass is different from the argument that the function expects, and the compiler cannot convert the passed-in argument
to the required type. For example, you cannot pass the literal value "1" as an argument when the function expects an array or a reference.
<h6>036 empty statement</h6>
The line contains a semicolon that is not preceded by an expression. SMALL does not support a semicolon as an empty statement, use an empty
compound block instead.
<h6>037 invalid string (possibly non-terminated string)</h6>
A string was not well-formed; for example, the final quote that ends a string is missing, or the filename for the #include directive was not
enclosed in double quotes or angle brackets.
<h6>038 extra characters on line</h6>
There were trailing characters on a line that contained a directive (a directive starts with a # symbol).
<h6>039 constant symbol has no size</h6>
A variable has a size (measured in a number of cells), a constant has no size. That is, you cannot use a (symbolic) constant with the sizeof
operator, for example.
<h6>040 duplicate "case" label (value value)</h6>
A preceding "case label" in the list of the switch statement evaluates to the same value.
<h6>041 invalid ellipsis, array size is not known</h6>
You used a syntax like &quot;arr[] = { 1, ... };", which is invalid, because the compiler cannot deduce the size of the array from the declaration.
<h6>042 invalid combination of class specifiers</h6>
A function is denoted as both "public" and "native", which is unsupported.
<h6>043 character constant exceeds range for packed string</h6>
Usually an attempt to store a Unicode character in a packed string where a packed character is 8-bits.
<h6>044 mixing named and positional parameters</h6>
You must either use named parameters or positional parameters for all parameters of the function.
<h6>045 too many function arguments</h6>
The maximum number of function arguments is currently limited to 64.
<h6>046 unknown array size (variable name)</h6>
For array assignment, the size of both arrays must be explicitly defined, also if they are passed as function arguments.
<h6>047 array sizes must match</h6>
For array assignment, the arrays on the left and the right size of the assignment operator must have the same size.
<h6>048 array dimensions must match</h6>
For an array assignment, the dimensions of the arrays on both sides of the "=" sign must match; when passing arrays to a function argument,
the arrays passed to the function (in the function call) must match with the definition of the function arguments.
<h6>049 invalid line continuation</h6>
A line continuation character (a backslash at the end of a line) is at an invalid position, for example at the end of a file or in a single line
comment.
<h6>050 invalid range</h6>
A numeric range with the syntax "n1 .. n2", where n1 and n2 are numeric constants, is invalid. Either one of the values in not a valid
number, or n1 is not smaller than n2.
<h6>051 invalid subscript, use "[ ]" operators on major dimensions</h6>
You can use the "array character index" operator (braces: "{ }" only for the last dimension. For other dimensions, you must use the cell index
operator (square brackets: "[ ]").
<h6>052 only the last dimension may be variable length</h6>
Except the last dimension, all array dimensions must have an explicit size.
<h6>053 exceeding maximum number of dimensions</h6>
The current implementation of the SMALL compiler only supports arrays with one or two dimensions.
<h6>054 unmatched closing brace</h6>
A closing brace ("}") was found without matching opening brace ("{").
<h6>055 start of function body without function header</h6>
An opening brace ("{") was found outside the scope of a function. This may be caused by a semicolon at the end of a preceding function header.
<h6>056 local variables and function arguments cannot be public</h6>
A local variable or a function argument starts with the character "@", which is invalid.
<h6>057 Unfinished expression before compiler directive</h6>
Compiler directives may only occur between statements, not inside a statement. This error typically occurs when an expression statement is
split over multiple lines and a compiler directive appears between the start and the end of the expression. This is not supported.
<h6>058 duplicate argument; same argument is passed twice</h6>
In the function call, the same argument appears twice, possibly through a mixture of named and positional parameters.
<h6>059 function argument may not have a default value (variable name)</h6>
All arguments of public functions must be passed explicitly. Public functions are typically called from the host application, who has no
knowledge of the default parameter values. Arguments of user defined operators are implied from the expression and cannot be inferred from
the default value of an argument.
<h6>060 multiple "#else" directives between "#if : : : #endif</h6>
Two or more #else directives appear in the body between the matching #if and #endif.
<h6>061 operator cannot be redefined</h6>
Only a select set of operators may be redefined, this operator is not one of them.
<h6>062 number of operands does not fit the operator</h6>
When redefining an operator, the number of operands that the operator has (1 for unary operators and 2 for binary operators) must be equal to
the number of arguments of the operator function.
<h6>063 operator requires that the function result has a "bool" tag</h6>
Logical and relational operators are defined as having a result that is either true (1) or false (0) and having a "bool" tag. A user defined operator should adhere to this definition.
<h6>064 cannot change predefined operators</h6>
One cannot define operators to work on untagged values, for example, because SMALL already defines this operation.
<h6>065 function argument may only have a single tag (argument number)</h6>
In a user defined operator, a function argument may not have multiple tags.
<h6>066 function argument may not be a reference argument or an array (argument number)</h6>
In a user defined operator, all arguments must be cells (non-arrays) that are passed "by value".
<h6>067 variable cannot be both a reference and an array (variable name)</h6>
A function argument may be denoted as a "reference" or as an array, but not as both.
<h6>068 invalid rational number precision in #pragma</h6>
The precision was negative or too high. For floating point rational numbers, the precision specification should be omitted.
<h6>069 rational number format already defined </h6>
This #pragma conflicts with an earlier #pragma that specified a different format.
<h6>070 rational number support was not enabled</h6>
A rational literal number was encountered, but the format for rational numbers was not specified.
<h6>071 user-defined operator must be declared before use (function name)</h6>
Like a variable, a user-defined operator must be declared before its first use. This message indicates that prior to the declaration of the user-
defined operator, an instance where the operator was used on operands with the same tags occurred. This may either indicate that the program
tries to make mixed use of the default operator and a user-defined operator (which is unsupported), or that the user-defined operator must be
"forwardly declared".
<h5>Fatal Errors</h5>
<h6>100 cannot read from file: filename</h6>
The compiler cannot find the specified file or does not have access to it.
<h6>101 cannot write to file: filename</h6>
The compiler cannot write to the specifued output file, probably caused by insucient disk space or restricted access rights (the file could be
read-only, for example).
<h6>102 table overflow: table name</h6>
This is an internal error of the compiler, caused by the limited size of its internal tables. The "table name" is one of the following:
<ul>
<li>"staging buffer": the staging buffer holds the code generated for an expression before it is passed to the peephole optimizer. The staging buffer grows dynamically, so an overflow of the staging buffer basically is an "out of memory" error.
<li>"loop table": the loop table is a stack used with nested do, for, and while statements. The table allows nesting of these statements up to 24
levels.
<li>"literal table": this table keeps the literal constants (numbers, strings) that are used in expressions and as
  initializers for arrays. The literal table
grows dynamically, so an overflow of the literal table basically is an "out of memory" error.
<li>"compiler stack": the compiler uses a stack to store temporary information it needs while parsing. An overflow of this stack is probably caused
by deeply nested (or recursive) file inclusion or complex expression involving function calls with many arguments.
<li>"option table": in case that there are more options on the command line or in the response file than the compiler can cope with.
</ul>
<h6>103 insufficient memory</h6>
General "out of memory" error.
<h6>104 invalid assembler instruction symbol</h6>
An invalid opcode in an #emit directive.
<h6>105 numeric overflow, exceeding capacity</h6>
A numeric constant, notably a dimension of an array, is too large for the compiler to handle. For example, when compiled as a 16-bit application,
the compiler cannot handle arrays with more than 32767 elements.
<h5>Warnings</h5>
<h6>200 symbol is truncated to 19 characters</h6>
The symbol is longer than sixteen characters. Truncation may cause different symbol names to become equal, which may cause error 021 or
warning 219.
<h6>201 redefinition of constant (symbol name)</h6>
The symbol was previously defined to a different value.
<h6>202 number of arguments does not match definition</h6>
At a function call, the number of arguments passed to the function (actual arguments) differs from the number of formal arguments declared in
the function heading. To declare functions with variable argument lists, use an ellipsis (...) behind the last known argument in the function
heading; for example: print(formatstring,...).
<h6>203 symbol is never used: identifier</h6>
A symbol is defined but never used. Public functions are excluded from the symbol usage check (since these may be called from the outside).
<h6>204 symbol is assigned a value that is never used: identifier</h6>
A value is assigned to a symbol, but the contents of the symbol are never accessed.
<h6>205 redundant code: constant expression is zero</h6>
Where a conditional expression was expected, a constant expression with the value zero was found, e.g. "while (0)" or "if (0)". The the
conditional code below the test is never executed, and it is therefore redundant.
<h6>206 redundant test: constant expression is non-zero</h6>
Where a conditional expression was expected, a constant expression with a non-zero value was found, e.g. if (1). The test is redundant, because
the conditional code is always executed.
<h6>207 unknown "#pragma"</h6>
The compiler ignores the pragma. The #pragma directives may change between compilers of different vendors and between different versions of
a compiler of the same version.
<h6>208 function uses both "return;" and "return value;"</h6>
The function returns both with and without a return value. The function should be consistent in always returning with a function result, or in
never returning a function result.
<h6>209 function should return a value</h6>
The function does not have a return statement, or it does not have an expression behind the return statement, but the function's result is
used in a expression.
<h6>210 possible use of symbol before initialization: identifier</h6>
A local (uninitialized) variable appears to be read before a value is assigned to it. The compiler cannot determine the actual order of reading
from and storing into variables and bases its assumption of the execution order on the physical appearance order of statements an expressions in
the source file.
<h6>211 possibly unintended assignment</h6>
Where a conditional expression was expected, the assignment operator (=) was found instead of the equality operator (==). As this is a frequent
mistake, the compiler issues a warning. To avoid this message, put parentheses around the expression, e.g. if ( (a=2) ).
<h6>212 possibly unintended bitwise operation</h6>
Where a conditional expression was expected, a bitwise operator (& or |) was found instead of a Boolean operator (&& or ||). In situations where
a bitwise operation seems unlikely, the compiler issues this warning. To avoid this message, put parentheses around the expression.
<h6>213 tag mismatch</h6>
A tag mismatch occurs when:
<ul>
<li>assigning to a tagged variable a value that is untagged or that has a different tag
<li>the expressions on either side of a binary operator have different tags
<li>in a function call, passing an argument that is untagged or that has a different tag than what the function argument was defined with
<li>indexing an array which requires a tagged index with no tag or a wrong tag name
</ul>
<h6>214 possibly a "const" array argument was intended: identifier</h6>
Arrays are always passed by reference. If a function does not modify the array argument, however, the compiler can sometimes generate more
compact and quicker code if the array argument is specifically marked as "const".
<h6>215 expression has no effect</h6>
The result of the expression is apparently not stored in a variable or used in a test. The expression or expression statement is therefore redundant.
<h6>216 nested comment</h6>
SMALL does not support nested comments.
<h6>217 loose indentation</h6>
Statements at the same logical level do not start in the same column; that is, the indents of the statements are different. Although SMALL is a
free format language, loose indentation frequently hides a logical error in the control flow. The compiler can also incorrectly assume loose indentation if the tab size with which you indented the source code differs from the assumed size, see #pragma tabsize and the compiler option -t.
<h6>218 old style prototypes used with optional semicolon</h6>
When using "optional semicolons", it is preferred to explicitly declare forward functions with the forward keyword than using terminating
semicolon.
<h6>219 local variable identifier shadows a symbol at a preceding level</h6>
A local variable has the same name as a global variable, a function, a function argument, or a local variable at a lower precedence level. This
is called "shadowing", as the new local variable makes the previously defined function or variable inaccessible.
<h6>220 exported or native symbol identifier is truncated to value characters</h6>
Symbol names for exported or native functions have a more restrictive length, due to restrictions in the file format, than names of internal functions. Although the symbol name can be used as is internally, it will be inserted in the native or exported table in its truncated form.
<h6>221 label name identifier shadows tag name</h6>
A code label (for the goto instruction) has the same name as a previously defined tag. This may indicate a faultily applied tag override; a typical
case is an attempt to apply a tag override on the variable on the left of the = operator in an assignment statement.
<h6>222 number of digits exceeds rational number precision</h6>
A literal rational number has more decimals in its fractional part than the precision of a rational number supports. The remaining decimals are ignored.
<h6>223 redundant "sizeof": argument size is always 1 (symbol name)</h6>
A function argument has a as its default value the size of another argument of the same function. The "sizeof" default value is only useful
when the size of the referred argument is unspecified in the declaration of the function; i.e., if the referred argument is an array.
<h6>224 indeterminate array size in "sizeof" expression (symbol name)</h6>
The operand of the sizeof operator is an array with an unspecified size. That is, the size of the variable cannot be determined at compile time.
If used in an "if" instruction, consider a conditionally compiled section, replacing if by #if.
<h5>Run time errors</h5>
The function library that forms the abstract machine returns error codes. These error codes encompass both errors for loading and initializing a binary file and run-time errors due to programmer errors.

<p><a href=#index>Index</a><hr>

<a name=partii><h3>Part II - The SMALL Language API</h3></a>

<hr><a name=partii0><h4>2.0 Core Functions</h4></a>

Since SMALL is targeted as an application extension language, most of the functions that are accessible to SMALL programs will be specific to the host application [<i>In fact GUN-TACTYX itself defines specific functions described in <a href="#partiii">Part III</a></i>]. Nevertheless, a small set of functions may prove useful to many environments. The "core" module consists of a set of functions that support the language itself. Several of the functions are needed to pull arguments out of a variable argument list. Since there are only few functions, I have opted to arrange them per category, rather than alphabetically.
<h5>heapspace()</h5>
Return the free space on the heap. The stack and the heap occupy a shared memory area.
<p>[...]
<h5>numargs()</h5>
Return the number of arguments passed to a function; numargs() is useful inside functions with a variable argument list.
<h5>getarg(arg, index=0)</h5>
Retrieve an argument from a variable argument list. When the argument is an array, the index parameter specifies the index into the array. The return value is the retrieved argument.
<h5>setarg(arg, index=0, value)</h5>
Set the value of an argument from a variable argument list. When the argument is an array, the index parameter specifies the index into the array. The return value is false if the argument or the index are invalid, and true on success.
<h5>strlen(const string[])</h5>
Returns the length of a string, either packed or unpacked, as the number of characters (not the number of cells).
<h5>strpack(dest[], const source[])</h5>
Copy a string from source to dest where the destination string will be in packed format. The source string may either be a packed or an unpacked string.
<h5>strunpack(dest[], const source[])</h5>
Copy a string from source to dest where the destination string will be in unpacked format. The source string may either be a packed or an unpacked string.
<p>[...]
<h5>seed(value)</h5>
Sets the starting seed of the pseudo-random number generator. The random number generator is reinitialized by calling
seed() with an argument value of 0 and the function returns the generated seed. It can be set to a new starting point by calling
it with a given seed number and returns that seed number.
<h5>random(max)</h5>
Returns a pseudo-random number in the range 0 to max-1.
<h5>max(value1, value2)</h5>
Returns the higher value of value1 and value2.
<h5>min(value1, value2)</h5>
Returns the lower value of value1 and value2.
<h5>clamp(value, min=cellmin, max=cellmax)</h5>
Returns value if it is in the range min { max; returns min if value is lower than min; returns max if value is higher than max.
<p>[<i>Added for use with GUN-TACTYX scripts</i>]
<h5>print(const string[])</h5>
Prints a string (packed or unpacked) to the console. For example, to print a carriage return on the console, use <i>print(&quot;^n&quot;)</i>
<h5>printint(value)</h5>
Prints an integer value to the console.
<h5>printflt(float:value)</h5>
Prints a floating point value on the console.<b></b>

<b>
<p ALIGN="LEFT"><font face="Verdana,Arial" size="2">printf(const format[], ...)</font></p>
</b>
<p ALIGN="LEFT"><font face="Verdana,Arial" size="2">The printf function
works similarly to the printf function
of the C language and may print
a string with embedded codes:<br>
&nbsp;&nbsp;&nbsp;</font> <font face="Verdana,Arial" size="2">%c print
a character at this position<br>
&nbsp;&nbsp;&nbsp; %d print a decimal number at
this position<br>
&nbsp;&nbsp;&nbsp; %f print a floating point
number at this position<br>
&nbsp;&nbsp;&nbsp; %s print a character string
at this position</font></p>

<p><a href=#index><font face="verdana,arial" size=-1>
Index

</font>
</a>
<font face="verdana,arial" size=-1>
<hr><a name=partii1><h4>2.1 Math Functions</h4></a>

[<i>Added for use with GUN-TACTYX scripts</i>]
<p>Several functions and operator definitions are built in to implement floating point arithmetic and their use is transparent to the programmer. Other useful functions are (remember that
angles are measured in radians):
<h5>float:float(value)</h5>
Converts an integer value to a float.
<h5>float:floatstr(const string[])</h5>
Converts a string to a float.
<h5>float:floatfract(float:value)</h5>
Returns the fractional part of the value.
<h5>floatround(float:value, floatround_method:method=floatround_round)</h5>
Rounds the value according to the method specified. The method may be equal to the constants
&quot;floatround_round&quot;, &quot;floatround_floor&quot; or &quot;floatround_ceil&quot;
<h5>float:abs(float:value)</h5>
Returns the absolute value.
<h5>float:acos(float:value)</h5>
Returns the arccosine of value.
<h5>float:asin(float:value)</h5>
Returns the arcsine of value.
<h5>float:atan(float:value)</h5>
Returns the arctangent of value.
<h5>float:cos(float:value)</h5>
Returns the cosine of value.
<h5>float:exp(float:value)</h5>
Returns the exponential of value.
<h5>float:log(float:value)</h5>
Returns the logarithm of value.
<h5>float:mod(float:oper1,float:oper2)</h5>
Calculates x modulo y, the remainder of x/y. 
<h5>float:pow(float:base,float:exp)</h5>
Returns the power of <i>base</i> raised to <i>exp</i> exponent.
<h5>float:sin(float:value)</h5>
Returns the sine of value.
<h5>float:sqrt(float:value)</h5>
Returns the square root of value.
<h5>float:tan(float:value)</h5>
Returns the tangent of value.

<p><a href=#index>Index</a>

<hr><a name=partiii><h3>Part III - The GUN-TACTYX API</h3></a>

<p>The warriors in the GUN-TACTYX arena are controlled by SMALL scripts. The interface
to the surrounding environment is given by the following set of functions. The value
assigned to some arguments and returned values are specific to the current implementation of the game and may change in future releases, but the API and its specifications are
very likely fixed once for all. Returned values may also change when a player
configure the arena through scripts.<br>
A player compiles the source code of his bot (for example &quot;<i>rookie.sma</i>&quot;)
using the 's' command of the console built in the game - invoke it pressing the
'F3' key - or using the command line program &quot;<i>sc.exe</i>&quot; stored in the &quot;<i>/bots</i>&quot;
folder of the game. Type in a DOS window:<p>&nbsp;&nbsp;&nbsp; sc rookie.sma<p>and
you'll get the compiled
file &quot;<i>rookie.amx</i>&quot;. A sample of a simple script is the following:
<pre>/* <i>&quot;rookie.sma&quot; - simple control code for a team of warriors</i> */
#include &quot;core&quot; // <i>include core functions</i>
#include &quot;math&quot; // <i>include math functions</i>
#include &quot;bots&quot; // <i>include bot specific functions</i>
main() { // <i>the main entry point of the script</i>
  // <i>defines a value to recognize enemy warriors</i>
  new const ENEMY_WARRIOR = ITEM_WARRIOR | ITEM_ENEMY;
  // <i>specifies a time limit to force a change in direction of the warrior</i>
  new const float:MAX_TIME = 10.0 // <i>note the &quot;point&quot; in the constant</i>
  new float:lastTime = getTime()
  // <i>loops forever (or better, until the bot dies)</i>
  while(true) {
    new float:thisTime = getTime()
    if(thisTime-lastTime &gt; MAX_TIME) {
      // <i>changes direction at random every MAX_TIME seconds</i>
      lastTime = thisTime
      new float:randAngle = float(random(21)-10)*1.5708
      rotate(getDirection()+randAngle)
    } else if(sight() &lt; 5.0) {
      // <i>if the warrior is within 5 meters from a wall,</i>
      // <i>change slightly its direction</i>
      rotate(getDirection()+0.31415);
    } else {
      // <i>give a look for the nearest enemy</i>
      new item = ENEMY_WARRIOR;
      new float:dist = 0.0
      new float:yaw
      watch(item,dist,yaw)
      if(item == ENEMY_WARRIOR) {
        // <i>Found one enemy!</i>
        // <i>Do you walk? Stop!</i>
        if(isWalking()) stand();
        // <i>Do you run? Walk!</i>
        else if(isRunning()) walk();
        // <i>Rotate towards enemy direction adding</i>
        // <i>the current direction (absolute) to the</i>
        // <i>enemy direction (relative to the head)</i>
        rotate(getDirection()+yaw);
        // <i>aim and see what is in front of the gun.</i>
        new item
        aim(item)
        // <i>It's an enemy, shoot!</i>
        if(item &amp; ENEMY_WARRIOR == ENEMY_WARRIOR)
          shootBullet()
      } else {
        // <i>Can't find any enemy!</i>
        // <i>Do you walk? Run!</i>
        if(isWalking())
          run();
        // <i>Are you standing?</i>
        else if(isStanding()) {
          // <i>Maybe you collided into someone...</i>
          if(getTouched() &amp; ITEM_WARRIOR != 0)
            // <i>if that is true, make a quarter turn...</i>
            rotate(getDirection()+1.5708);
          else
            // <i>... otherwise walk.</i>
            walk();
        }
      }
    }
  }
}</pre>
The script above makes use of a low number of the available functions. Other
sample scripts are available in the &quot;<i>/bots</i>&quot; folder of the game.
Here follows the complete list of functions with some explanation that
specifies also the parameters of the warriors and some characteristic of the environment in the current implementation.<br>
<b>Note</b>: In the following list, the tag &quot;int:&quot; is used to mark integer arguments and return values, but that tag is there only for clarity and it is an error to use it in SMALL scripts (read the include file
&quot;bots.inc&quot;
in the &quot;<i>/bots</i>&quot; folder for the real function definitions).
Remember that the simulator of GUN-TACTYX uses meters and seconds as units of space and time respectively.

<p><a href=#index>Index</a>
<hr><a name=partiii0><h4>3.0 Get Warrior Properties</h4></a>

<h5>int:getID()</h5>
Returns the identification value of the bot from 0 to the maximum number of mates in the team decreased by
one. The chief of the team has ID equal to zero.

<h5>getLocation(&amp;float:x,&amp;float:y,&amp;float:z=0.0)</h5>
Returns the absolute coordinates of the location of the bot. The arguments don't
need to be initialized before the call. The <i>z</i> argument is optional. The <i>x</i>
and <i>y</i> axis lay on a horizontal plane, while the <i>z</i> axis points up.
<h5>float:getCPUPeriod()</h5>
Returns the period of a single clock tick of the virtual CPU that runs the AI of the bot. The frequency of the CPU is 10KHz, so the value returned is equal to <b>0.0001 s</b>.
<h5>int:getMemorySize()</h5>
Returns the size in bytes of the virtual RAM of the bot. The returned value is <b>32768</b> (32Kb), but the amount of memory available may be less (use the core function <i>heapspace()</i> to get it).
<h5>int:getOwned()</h5>
Returns the object held by the bot. The returned value may be <b>ITEM_GUN</b>, <b>ITEM_SIGN</b> or <b>ITEM_NONE</b>. The constants are specified in the include file
&quot;bots.inc&quot;.
<h5>int:getTouched()</h5>
Returns the last object touched by the bot. When multiple objects are near the
bot, only one is reported. The returned value changes from case to case, but it is given by the
values <b>ITEM_WARRIOR</b>, <b>ITEM_BULLET</b>, <b>ITEM_GRENADE</b>, <b>ITEM_GUN</b>, <b>ITEM_SIGN</b>,
<b>ITEM_TARGET</b>, <b>ITEM_MEDIKIT</b>, <b>ITEM_FOOD</b>, <b>ITEM_ARMOR</b>, <b>ITEM_BULLETS</b>, <b>ITEM_GRENADES</b>.
In the first three cases a logical "OR" adds also the two attributes <b>ITEM_FRIEND</b> and <b>ITEM_ENEMY</b>. The constants are specified in the include file
&quot;bots.inc&quot;.
<h5>float:getSize()</h5>
Returns the width and depth of the bounding box that contains the bot. This box is used for collision detection against other bots, projectiles and walls.  The returned value is
<b>1.125 m</b> (meters).
<h5>float:getHeight()</h5>
Return the height of the bounding box that contains the bot. This box is used for collision detection against other bots, projectiles and walls. The sensors used to <i>hear()</i>, <i>sight()</i> and <i>watch()</i> are placed at that height. The returned value is <b>1.5 m</b>,
when the bot is standing, or <b>1.125 m</b>, when the bot is crouched. 
<h5>float:getEnergy()</h5>
Returns the current energy of the bot. When the energy reaches zero the bot can't run any more, but can still walk.
<h5>float:getMaxEnergy()</h5>
Returns the maximum amount of energy that a bot can own. <font face="verdana,arial" size=-1>The
returned value is</font> <b>100</b>.
<h5>float:getHealth()</h5>
Returns the current health of the bot. When the health reaches zero, the bot is
disabled.
<h5>float:getMaxHealth()</h5>
Returns the maximum amount of health that a bot can own.<font face="verdana,arial" size=-1>
The returned value is <b>100</b>.</font>
<h5>float:getArmor()</h5>
Returns the current armor of the bot. The armor reduce in percentage the amount of damage that the health of a bot
may receive. When the armor value is zero, the bot receives full damage. When the value is equal to 100, it gets no damage.
<h5>float:getMaxArmor()</h5>
Returns the maximum amount of armor that a bot can own.<font face="verdana,arial" size=-1> 
The returned value is <b>100</b>.

</font>

<h5>int:getKilledEnemies()</h5>
Returns the number of the enemies that this bot killed.<h5>int:getKilledFriends()</h5>
Returns the number of the friends (mates) that this bot killed.

<p><a href=#index>Index</a>
<hr><a name=partiii1><h4>3.1 Get Weapon Properties</h4></a>

<h5>float:getGunHeight()</h5>
Return the height of the weapon from the ground. The sensor used to <i>aim()</i> and the starting point for <i>shootBullet()</i> and <i>launchGrenade()</i> are placed at that height. The returned value is <b>1.3125 m</b>,
when the bot is standing, or <b>1.125 m</b>, when the bot is crouched. 
<h5>float:getGunLength()</h5>
Return the length of the weapon from the ground. Together with torso angles, gives the point from
which bullets and grenades leave the gun. The returned value is <b>0.9375 m</b>. 
<h5>int:getBulletLoad()</h5>
Returns the current number of bullets in the barrel of the gun.
<h5>int:getBulletMaxLoad()</h5>
Returns the maximum number of bullets that the barrel of the gun can host. The returned value is <b>100</b>.
<h5>float:getBulletSpeed()</h5>
Returns the speed of a bullet shot by the gun. The movement of (our virtual) bullets is not affected by gravity, so the trajectory of a bullet is always a straight line.
The real speed is affected by the movement of the bot, so it can range from <i>35 m/s</i>, when the bot runs in the direction of the shot, to
<i>27.5 m/s</i>, when the bot walks backward in the opposite direction of the shot. The returned value is
<b>30 m/s</b>.
<h5>float:getBulletHealthLoss()</h5>
Returns the health lost by a bot when hit by a bullet. Armor effects are not taken into
account, so this value corresponds to the maximum loss of health that may be
caused by a bullet. The returned value is <b>50</b>.
<h5>int:getGrenadeLoad()</h5>
Returns the current number of grenades in the barrel of the gun.
<h5>int:getGrenadeMaxLoad()</h5>
Returns the maximum number of grenades that the barrel of the gun can host. The returned value is <b>3</b>.
<h5>float:getGrenadeSpeed()</h5>
Returns the speed of a grenade launched by the gun. The movement of grenades is affected by gravity, so the trajectory of a grenade is a parabola. The initial speed
depends also on the movement of the bot. The returned value is <b>15 m/s</b>.
<h5>float:getGrenadeDelay()</h5>
Returns the time that must elapse before a grenade can explode. Grenades explode immediately only when they hit a bot. The returned value is
<b>3 s</b>.
<h5>float:getGrenadeMaxRange()</h5>
Returns the maximum distance that the effects of a grenade can reach. Damages to the health and the armor of a bot are inverse-proportional to the distance of the explosion.
The returned value is <b>5 m</b>.
<h5>float:getGrenadeMaxDamage()</h5>
Returns the maximum health lost by a bot when the grenade explodes in close
contact.&nbsp; Armor effects are not taken into
account, so this value corresponds to the maximum loss of health that may be
caused by a grenade. The returned value is <b>150</b>.<h5>float:getExplosionTimeLen()</h5>
Returns the duration of the sound of an explosion. The returned value is <b>1 s</b>.

<p><a href=#index>Index</a>
<hr><a name=partiii2><h4>3.2 Get Action Properties</h4></a>

<h5>int:getGoal()</h5>
Returns the goal that a team must reach. Possible values are <b>GOAL_TERMINATE_CHIEF</b> (a team must terminate the enemy chiefs to win), <b>GOAL_TERMINATE_TEAM</b> (a team must terminate all the warriors of the
enemy teams to win) and <b>GOAL_CAPTURE_SIGN</b> (a team must capture the sign of the enemy teams to
win or, alternatively, terminate all the warriors of the enemy teams). The constants are specified in the include file
&quot;bots.inc&quot;.

<h5>int:getPlay()</h5>
Returns the type of match that the bots play. Possible values are <b>PLAY_FIGHT</b>
(the teams fight against each other), <b>PLAY_RACE</b> (teams compete in a
race) and <b>PLAY_SOCCER</b> (teams play a soccer-like match). The constants are specified in the include file
&quot;bots.inc&quot;.<h5>int:getTeams()</h5>
Returns the number of teams in the match. The returned value depends on the
choices of the user.<h5>int:getMates()</h5>
Returns the number of mates in each team. The returned value depends on the
choices of the user.
<h5>float:getTimeout()</h5>
Returns the duration of the match. Its default value is <b>300 s</b>.<h5>bool:getGoalLocation(int:teamID,&amp;float:x,&amp;float:y,&amp;float:z=0.0)</h5>
Returns <i>true</i> if the coordinates of the goal location of the given team
are available. The goal location is the position from which the team starts.
This information is not available for enemy teams in every type of play (for
example, it is not available in the <b>PLAY_FIGHT</b> mode, but it is in <b>PLAY_SOCCER</b>).
If successful, the coordinates are returned in the arguments <i>x</i>, <i>y</i>,
and <i>z</i>. The last three arguments don't need to be initialized before the
call and <i>z</i> is optional. The <i>teamID</i> is zero for bot's own
team, greater than zero until <i>getTeams()-1</i> for enemy teams.
<h5>float:getGoalSize()</h5>
Returns the size of the goal area. Its default value is <b>7.5 m</b>.
<h5>float:getTargetSize()</h5>
Returns the size of the target (a particular item, the ball, useful is <i>Soccer</i>
mode). Its default value is <b>0.3125 m</b>.
<h5>float:getTargetMaxSpeed()</h5>
Returns the largest speed reachable by the target (a particular item, the ball, useful is <i>Soccer</i>
mode). Its default value is <b>15 m/s</b>.
<h5>float:getTime()</h5>
Returns the elapsed time in seconds since the beginning of the match. The time
advances in discrete steps of <i>getSimulationStep()</i> seconds. Use <i>getTicksCount()</i>
for a finer estimation of elapsed time, but remember that the simulator itself
advances in discrete steps of <i>getSimulationStep()</i> seconds.<h5>int:getTicksCount()</h5>
Returns the virtual CPU clock ticks since the beginning of the match.
<h5>float:getSimulationStep()</h5>
Returns the duration of a single time step of the simulation. The physics engine uses an Euler integrator with a fixed time step of <b>0.01 s</b>.
<h5>float:getGravity()</h5>
Returns the value of the gravity acceleration. Gravity affects bots and grenades, not (our virtual) bullets. The
default value is <b>-9.81 m/s<sup>2</sup></b>.<h5>float:getGroundElasticity()</h5>
Returns the value of the ground restitution applicable to bouncing objects. It gives the fraction of the velocity
that a bouncing object receives back after a collision. The default value is <b>0.8</b>.
<h5>bool:isStanding()</h5>
Returns <i>true</i> if the bot is standing. From this attitude a bot can crouch
or walk (forward or backward).
<h5>bool:isCrouched()</h5>
Returns <i>true</i> if the bot is crouched. From this attitude a bot can stand
or walk crouched, but can't rotate on its vertical axis.
<h5>bool:isWalking()</h5>
Returns <i>true</i> if the bot is walking. From this attitude a bot can run or
stand.
<h5>bool:isWalkingcr()</h5>
Returns <i>true</i> if the bot is walking crouched. From this attitude a bot can
stop crouched.
<h5>bool:isWalkingbk()</h5>
Returns <i>true</i> if the bot is walking backward. From this attitude a bot can
stop standing.
<h5>bool:isRunning()</h5>
Returns <i>true</i> if the bot is running. From this attitude a bot can decrease
its speed walking.
<h5>bool:isRotating()</h5>
Returns <i>true</i> if the bot is rotating around its vertical axis. This means
that the bot changed its direction with <i>rotate()</i> but the rotation hasn't
reached the final angle yet.
<h5>bool:isTorsoRotating()</h5>
Returns <i>true</i> if the bot's torso is rotating. This means that the bot
changed the direction of its torso with <i>rotateTorso()</i> but the rotation
hasn't reached the final angle yet.<h5>bool:isTorsoBending()</h5>
Returns <i>true</i> if the bot's torso is bending. This means that the bot
changed the inclination of its torso with <i>bendTorso()</i> but the rotation
hasn't reached the final angle yet.
<h5>bool:isHeadRotating()</h5>
Returns <i>true</i> if the bot's head is rotating. This means that the bot
changed the direction of its head with <i>rotateHead()</i> but the rotation
hasn't reached the final angle yet.<h5>bool:isHeadBending()</h5>
Returns <i>true</i> if the bot's head is bending. This means that the bot
changed the inclination of its head with <i>bendHead()</i> but the rotation
hasn't reached the final angle yet.
<h5>float:getWalkSpeed()</h5>
Returns the speed of a bot when it walks. The returned value is <b>2.5 m/s</b>.
<h5>float:getWalkcrSpeed()</h5>
Returns the speed of a bot when it walks crouched. The returned value is <b>2.5 m/s</b>.
<h5>float:getWalkbkSpeed()</h5>
Returns the speed of a bot when it walks backward. The returned value is <b>-2.5 m/s</b>.
<h5>float:getRunSpeed()</h5>
Returns the speed of a bot when it runs. The returned value is <b>5 m/s</b>.
<h5>float:getFallMaxSpeed()</h5>
Returns the maximum speed that a bot must not reach to survive a fall. The returned value is <b>7.5 m/s</b>.
<h5>float:getMaxKickSpeed()</h5>
Returns the maximum speed that a bot can transfer to a target (the ball) after a collision. The returned value is
<b>5 m/s</b>.
<h5>float:setKickSpeed(float:speed)</h5>
Sets the speed that a bot transfers to a target (the ball) after a collision and returns
the value effectively set.
<h5>float:getKickSpeed()</h5>
Returns the speed that a bot transfers to a target after a collision.
<h5>float:getStandEnergyGain()</h5>
Returns the energy gained when a bot is standing. The returned value is <b>1 unit/s</b>.
<h5>float:getRunEnergyLoss()</h5>
Returns the energy lost when a bot is running. The returned value is <b>2 unit/s</b>.
<h5>float:getDirection()</h5>
Returns the absolute direction of the legs or walk direction. "Absolute" means that different
bots face the same direction when <i>getDirection()</i> reports the same value
or values that differ of <i>2*k*PI</i>, were <i>k</i> is an integer. Be aware
that the angle returned by <i>getDirection()</i> is not bounded by any interval
of values, so don't expect always a returned value between <i>-PI</i> and <i>PI</i>.
<h5>float:getRotSpeed()</h5>
Returns the speed of turn of the bot. The returned value is <b>PI/2 radians/s</b>.
<h5>float:getTorsoYaw()</h5>
Returns the angle of rotation of the torso around a vertical axis (relative to the forward orientation of the
legs). It gives also the direction of the gun.
<h5>float:getTorsoMinYaw()</h5>
Returns the minimum angle of rotation of the torso around a vertical axis. The returned value is
<b>-PI/3 radians</b>.
<h5>float:getTorsoMaxYaw()</h5>
Returns the maximum angle of rotation of the torso around a vertical axis. The returned value is
<b>PI/3
radians</b>.
<h5>float:getTorsoPitch()</h5>
Returns the angle of rotation of the torso around an horizontal axis. It gives also the direction of the gun.
<h5>float:getTorsoMinPitch()</h5>
Returns the minimum angle of rotation of the torso around an horizontal axis (the torso appears to be pushed
forward). The returned value is <b>-PI/4 radians</b>.
<h5>float:getTorsoMaxPitch()</h5>
Returns the maximum angle of rotation of the torso around an horizontal axis (the torso appears to be pulled
backward). The returned value is <b>PI/4 radians</b>.
<h5>float:getTorsoRotSpeed()</h5>
Returns the speed of rotation of the bot's torso. The returned value is <b>PI/2 radians/s</b>.
<h5>float:getHeadYaw()</h5>
Returns the angle of rotation of the head around a vertical axis (relative to the forward orientation of the
torso). It gives also the direction of several sensors.
<h5>float:getHeadMinYaw()</h5>
Returns the minimum angle of rotation of the head around a vertical axis. The returned value is <b>-PI/3 radians</b>.
<h5>float:getHeadMaxYaw()</h5>
Returns the maximum angle of rotation of the head around a vertical axis. The returned value is
<b>PI/3 radians</b>.
<h5>float:getHeadPitch()</h5>
Returns the angle of rotation of the head around a horizontal axis (relative to the forward orientation of the
torso). It gives also the direction of several sensors.
<h5>float:getHeadMinPitch()</h5>
Returns the minimum angle of rotation of the head around a horizontal axis (the head appears to be pushed
forward). The returned value is <b>-PI/4 radians</b>.
<h5>float:getHeadMaxPitch()</h5>
Returns the maximum angle of rotation of the head around an horizontal axis (the head appears to be pulled
backward). The returned value is <b>PI/4 radians</b>.
<h5>float:getHeadRotSpeed()</h5>
Returns the speed of rotation of the bot's head. The returned value is <b>PI/2 radians/s</b>.
<h5>float:getAngleOfView()</h5>
Returns half of the angle of view used by <i>watch()</i>. The returned value is <b>PI/6 radians</b>.<h5>float:getSensorsRange()</h5>
Returns the maximum effective distance of the sensors. The returned value is <b>200 m</b>.<h5>float:getTimeNeededFor(int:action)</h5>
<p>Returns the time needed to perform an action. During that time the execution
of the bot's thread is not suspended. The actions affected are:<br>
<b>ACTION_SAY</b>: Returns the time needed to pass after a say before a bot can say another word. The returned value is <b>0.5 s</b>.<br>
<b>ACTION_SPEAK</b>: R</font><font face="verdana,arial" size=-1>eturns the time needed to pass
after a speak before a bot can speak another word on the radio. The returned value is
<b>0.25 s</b>.<br>
<b>ACTION_MOVE</b>: Returns the time needed to pass after a move before a bot can change its current move attitude. The returned value is <b>1 s</b>.<br>
<b>ACTION_SHOOT</b>: Returns the time needed to pass after a shot before a bot can
shoot, drop or raise an item again. The returned value is <b>0.5 s</b>.<br>
<b>ACTION_DROP</b>:
Returns the time needed to pass after a drop or raise before a bot can shoot,
drop or raise an item again. Used for raise action too. The returned value is <b>0.5 s</b>.

</font>
</p>
<font face="verdana,arial" size=-1><h5>float:getTimeForRespawn(int:item)</h5>
Returns the time needed by a raised powerup to appear again. Only powerups that
are available at the beginning of the game can respawn, not powerup drop by
warriors. The returned value changes from case to case, according to the <i>item</i>
argument, as follows: <b>ITEM_MEDIKIT</b> (<b>10</b> s), <b>ITEM_FOOD</b> (<b>15</b>
s), <b>ITEM_ARMOR</b> (<b>20</b> s), <b>ITEM_BULLETS</b> (<b>10</b> s), <b>ITEM_GRENADES</b>
(<b>10</b> s). The function returns <b>-1</b> if the <i>item</i> can't respawn.
<h5>float:getTimeLostTo(int:action)</h5>
<p>Returns the time lost to perform an action. During that time the execution of
the bot's thread is suspended. The actions affected are:<br>
<b>ACTION_SIGHT</b>: Returns the time lost by the CPU when the bot calls the <i>sight()</i> function. The returned value is <b>0.01 s</b>.<br>
<b>ACTION_AIM</b>:
Returns the time lost by the CPU when the bot calls the <i>aim()</i> function. The returned value is <b>0.04 s</b>.<br>
<b>ACTION_HEAR</b>: Returns the time lost by the CPU when the bot calls the <i>hear()</i> function. The returned value is <b>0.04 s</b>.<br>
<b>ACTION_WATCH</b>:
Returns the time lost by the CPU when the bot calls the <i>watch()</i> function. The returned value is <b>0.04 s</b>.<br>
<b>ACTION_LISTEN</b>:
Returns the time lost by the CPU when the bot calls the <i>listen()</i> function. The returned value is <b>0.04 s</b>.&nbsp;</p>
<h5>float:getDropAmount(int:item)</h5>
Returns the amount of a specific item that a warrior can drop at a time. The returned value changes from case to
case, according to the <i>item</i> argument, as follows.<b><br>
ITEM_MEDIKIT </b>returns <b>50</b>:<b> </b>A warrior can't drop a medikit if he
owns a quantity of health equal or less than this amount;<b><br>
ITEM_FOOD</b> returns <b>50</b>: <b> </b> A
warrior can't drop food if it owns a quantity of energy equal or less than this
amount;<br>
<b>ITEM_ARMOR</b> returns <b>100</b>: A warrior can't
drop less than this amount;<br>
 <b>ITEM_BULLETS</b> returns <b>50</b>: A warrior can't
drop bullets recharges if it owns a quantity of bullets equal or less than this
amount;<br>
 <b>ITEM_GRENADES</b> returns <b>3</b>: A warrior
can't drop grenades recharges if it owns a quantity of grenades less than this
amount;<br>
the function returns <b>-1</b> if warriors can't drop that item.

<p><a href=#index>Index</a>
<hr><a name=partiii3><h4>3.3 Perform Actions</h4></a>

<h5>bool:wait(float:time)</h5>
Performs the &quot;wait&quot; action. Always successful. The execution of the
bot's program waits the specified seconds, then it is resumed. A negative value
for the arguments resolves is no wait.&nbsp;

<h5>bool:stand()</h5>
Performs the "stand" action. Successful only when a bot runs, walks forward,
walks backward or is crouched, provided that at least a <i>getTimeNeededFor(ACTION_MOVE)</i>
has passed from the last movement action.
When standing, a bot can rotate on its vertical axis.
<h5>bool:crouch()</h5>
Performs the "crouch" action. Successful only when a bot is walking crouched or is standing, provided that at least a
<i>getTimeNeededFor(ACTION_MOVE)</i>
 has passed from the last movement action.
When crouched, a bot can't rotate on its vertical axis.
<h5>bool:walk()</h5>
Performs the "walk" action. Successful only when a bot is running or is standing, provided that at least a
<i>getTimeNeededFor(ACTION_MOVE)</i>
 has passed from the last movement action.
<h5>bool:walkcr()</h5>
Performs the "walking crouched" action. Successful only when a bot is crouched, provided that at least a
<i>getTimeNeededFor(ACTION_MOVE)</i>
 has passed from the last movement action.
<h5>bool:walkbk()</h5>
Performs the "walk backward" action. Successful only when a bot is standing, provided that at least a
<i>getTimeNeededFor(ACTION_MOVE)</i>
 has passed from the last movement action.
<h5>bool:run()</h5>
Performs the "run" action. Successful only when a bot is walking, provided that at least a
<i>getTimeNeededFor(ACTION_MOVE)</i>
 has passed from the last movement action.
<h5>bool:rotate(float:angle)</h5>
Performs a rotation around the vertical axis of the bot. Always successful, but
the rotation to achieve the required angle is performed only when the bot is not
crouched. The angle of rotation is absolute (this means that bots facing
different direction, required to make a rotation of the same angle, face at the end the same direction).
One can get multiple complete rotations passing as arguments large enough angles.
<h5>bool:rotateTorso(float:angle)</h5>
Performs a rotation around the vertical axis of the bot's torso. The angle of rotation is relative to the "legs direction" (this means that a
zero angle points the gun linked to the torso directly forward according to the walk direction). Torso rotations can't exceed specific fixed values (read the previous section).
<h5>bool:rotateHead(float:angle)</h5>
Performs a rotation around the vertical axis of the bot's head. The angle of rotation is relative to the "torso direction",
which is at the same time relative to the "legs direction" (this means that a
zero angle points the head in the same direction of the gun). Head rotations can't exceed specific fixed values (read the previous section).
<h5>bool:bendTorso(float:angle)</h5>
Performs a bend of the bot's torso. Positive angles pull the torso back and at the same time the gun points to the sky, negative ones push the torso forward (making a bow) and at the same time the gun points to the ground. Torso bends can't exceed specific fixed values (read the previous section). When "rotate" and "bend" are concatenated, the "bend" always follows the rotation around the vertical axis.
<h5>bool:bendHead(float:angle)</h5>
Performs a bend of the bot's head. Positive angles pull the head back, negative ones push the head forward. Head bends can't exceed specific fixed values (read the previous section). When "rotate" and "bend" are concatenated, the "bend" always follows the rotation around the vertical axis.
<h5>bool:drop(int:item)</h5>
Drops to the ground a specified item. Returns <i>true</i> if the item is effectively dropped. The value of <i>item</i> may be <b>ITEM_MEDIKIT</b> (if the warrior wants to drop <i>getDropAmount(ITEM_MEDIKIT)</i> of health), <b>ITEM_FOOD</b> (if the warrior wants to drop <i>getDropAmount(ITEM_FOOD)</i> of energy), <b>ITEM_ARMOR</b> (if the warrior wants to drop <i>getDropAmount(ITEM_ARMOR)</i> of armor), <b>ITEM_BULLETS</b> (if the warrior wants to drop <i>getDropAmount(ITEM_BULLETS)</i> of bullets), <b>ITEM_GRENADES</b> (if the warrior wants to drop <i>getDropAmount(ITEM_GRENADES)</i> of
grenades), <b>ITEM_GUN</b> (if the warrior owns a gun and wants to drop it), <b>ITEM_SIGN</b> (if the warrior owns the sign and wants to drop
it). The functions fails if the amount of item owned by the bot is not enough to
be dropped, or simply when the bot doesn't hold the item.

</font>
<font face="verdana,arial" size=-1>In case the item dropped is the sign or the
weapon at least a <i>getTimeNeededFor(ACTION_DROP)</i> time must pass before a
shoot, raise or drop can be performed again. The sign can't be
dropped by the chief when the goal of the match is &quot;<i>Terminate enemy
chief</i>&quot;.
<h5>bool:raise(int:item)</h5>
Gets from the ground a specified item, when it is touched. The value of <i>item</i> must be the same reported by the function <i>getTouched()</i>.
Returns <i>true</i> if the item is effectively raised. In case the item raised
is a sign or a weapon at least a <i>getTimeNeededFor(ACTION_DROP)</i> time must
pass before a shoot, raise or drop can be performed again.
<h5>bool:shootBullet()</h5>
Shoots a bullet, provided that at least a <i>getTimeNeededFor(ACTION_SHOOT)</i>
 has passed from the last shot. The direction of the bullet is given by the current angles of the legs and the torso,
because they affect the direction of the gun. The speed of the bullet changes according
to the usual composition of velocities considering the velocity of the bot. The gravity does not
modify the trajectory of (our virtual) bullets. Returns <i>true</i> if the bullet is shot. 
<h5>bool:launchGrenade()</h5>
Launches a grenade, provided that at least a <i>getTimeNeededFor(ACTION_SHOOT)</i>
 has passed from the last shot. The initial direction of the grenade is given by the current angles of the legs and the torso,
because they affect the direction of the gun. The initial speed of the grenade changes according
to the usual composition of velocities considering the velocity of the bot. The gravity modifies the trajectory
of grenades. Returns <i>true</i> if the grenade is launched.<h5>bool:say(int:word)</h5>
Says a word, provided that at least a <i>getTimeNeededFor(ACTION_SAY)</i>
 has passed from the last spoken word.
The word is transmitted only
through air. The
function returns <i>true</i> if the word is spoken, while returns <i>false</i> if the
bot try to say a word too soon.<h5>bool:speak(int:channel,int:word)</h5>
Speaks on the radio, provided that at least a <i>getTimeNeededFor(ACTION_SPEAK)</i>
 has
passed from the last spoken word.
The <i>channel</i> argument selects the radio channel to transmit the word
spoken (nothing is heard through air). The
function returns <i>true</i> if the word is spoken, while returns <i>false</i> if the
bot try to spoke a word too soon or if the radio channel is not free.<h5>bool:listen(int:channel,&amp;int:word,&amp;int:id=0)</h5>
Returns <i>true</i> if a word was spoken on a radio channel. The <i>channel</i>
argument selects the radio channel, while <i>word</i> gives the value of the
spoken work. It doesn't need to be initialized before the call. The <i>id</i> argument returns an identification integer
of the talking warrior: It's the actual id for friends, while is a random integer for enemies.
The <i>id</i>  argument is optional. This function takes <i>getTimeLostTo(ACTION_LISTEN)</i> seconds to complete.<h5>float:hear(&amp;int:item,&amp;<font face="verdana,arial" size=-1>int:</font>sound,&amp;float:yaw=0.0,&amp;float:pitch=0.0,&amp;int:id=0)</h5>
Returns the distance of the nearest sound heard by the bot. The argument <i>item</i>
must be set before the call to one of these values: <b>0</b> (the nearest sound
among spoken words, gun shots and grenade explosions is reported), <b>ITEM_GUN</b>
(the nearest sound among gun shots or grenade explosions is reported, words
spoken by warriors are discarded), <b>ITEM_GRENADE</b> (the nearest sound among
grenade explosions is reported, words spoken by warriors and gun shots are
discarded). The source of the sound (<i>item</i>) returned by the function may be an <b>ITEM_GUN</b>, in this case the <i>sound</i> is a <b>SOUND_SHOT</b> or a <b>SOUND_LAUNCH</b>
(respectively if a bullet is shot or if a grenade is launched), an <b>ITEM_GRENADE</b>,
in this case a <b>SOUND_BOOM</b> that lasts for <i>getExplosionTimeLen</i>()
seconds, or an <b>ITEM_WARRIOR</b>, in the latter case the <i>sound</i> corresponds to the word spoken by the source.
All the previous item <i>id </i>values are &quot;ORed&quot; with <b>ITEM_FRIEND</b>
or <b>ITEM_ENEMY</b> according to the team belonging of the bullet, grenade or
warrior. The <i>yaw</i> argument gives the rotation around the vertical axis relative to the head from which the sound comes. The <i>pitch</i> argument gives the angle relative to the horizontal plane linked to the head from which the sound comes.
The <i>id</i> argument returns an identification integer applicable only to
warriors: It's the actual id for friends, while is a random integer for enemies.
The <i>hear()</i> function returns a value (the distance of the sound) and also modifies the value of the arguments <i>item</i>, <i>sound</i>, <i>yaw</i>,
<i>pitch</i> and <i>id</i>. The last four don't need to be initialized when the function is
called, while <i>item</i> must be. Moreover <i>yaw,</i>
<i>pitch</i>  and <i>id</i> are optional. If nothing is heard, according also
to the <i>item</i> filter set before the call, the final value of <i>item</i> is <b>ITEM_NONE</b>. If the bot shots or speaks during a <i>hear()</i> call, it hears
itself (this also depends on the filter set). This function takes
<i>getTimeLostTo(ACTION_HEAR)</i>  seconds to complete.
<br><b>Important Note</b>: Remember that the value of <i>yaw</i> returned by the function is relative to the current orientation of the head, so if you want to rotate the bot to face the source of the sound, you must use the code "<i>rotate(getDirection()+getTorsoYaw()+getHeadYaw()+yaw)</i>"
<h5>float:sight()</h5>
Returns the distance of the nearest wall right in front of the head (the angles of rotation of the head
and torso are taken into account). This function takes <i>getTimeLostTo(ACTION_SIGHT)</i> 
seconds to complete.
<h5>float:aim(&amp;<font face="verdana,arial" size=-1>int:</font>item)</h5>
Returns the distance of the nearest warrior in front of the aim device of the
gun (the angles of rotation of the torso are taken into account). If no warrior is in front of the aim device, the distance of the wall is
given. The returned value of <i>item</i> may be <b>ITEM_WARRIOR|ITEM_FRIEND</b> if the warrior is a friend,
<b>ITEM_WARRIOR|ITEM_ENEMY</b> if it is an enemy, or <b>ITEM_NONE</b> for a wall. The <i>aim()</i> function returns a value (the distance of the item or the wall detected) and also modifies the value of the <i>item</i> argument that doesn't need to be initialized when the function is called. This function takes
<i>getTimeLostTo(ACTION_AIM)</i>  seconds to complete.
<br><b>Important Note</b>: Remember that the velocity of the bullets is affected by the velocity of the bot, so a bullet can follow a trajectory different from the direction of the aim beam.
<h5>int:watch(&amp;<font face="verdana,arial" size=-1>int:</font>item,&amp;float:dist,&amp;float:yaw=0.0,&amp;float:pitch=0.0,&amp;int:id)</h5>
If the item watched is a warrior the function may return <b>ATTRIBUTE_HAS_GUN</b> (if the warrior holds a weapon), <b>ATTRIBUTE_HAS_SIGN</b> (if the warrior holds the sign) or <b>ATTRIBUTE_NONE</b>. It returns always <b>ATTRIBUTE_NONE</b> in other cases. The function <i>watch()</i> finds the item
that fits some requirements in front of the head within a fixed angle of view (the angles of rotation of the head
and torso are taken into
account). The argument <i>item</i> and <i>dist</i> must be set before execution.
<i>Item</i> is a filter that permits to choose which kind of item to see. The constant values <b>ITEM_WARRIOR</b>, <b>ITEM_BULLET</b>, <b>ITEM_GRENADE</b>, <b>ITEM_GUN</b>, <b>ITEM_MEDIKIT</b>, <b>ITEM_FOOD</b>, <b>ITEM_ARMOR</b>, <b>ITEM_BULLETS</b> (for reloads of bullets), <b>ITEM_GRENADES</b> (for reloads of grenades), <b>ITEM_SIGN</b> (the sign may be invisible if it is owned by a warrior: Check for the attribute <b>ATTRIBUTE_HAS_SIGN</b> in this
case), <b>ITEM_TARGET</b> (its meaning depends on the type of play). <b>ITEM_FRIEND</b> and <b>ITEM_ENEMY</b> are combined using logical
&quot;ORs&quot;
only with warrior, bullet or grenade items. <i>Dist</i> gives the minimum distance that the item must have from the
bot to be seen (useful to concatenate subsequent &quot;watches&quot; to see
objects at different distances and not always the nearest). The <i>watch()</i> function returns a value (an attribute of the item) and also modifies the value of the arguments <i>item</i> (the item effectively seen), <i>dist</i> (the effective distance of the item), <i>yaw,</i> <i>pitch</i> 
and <i>id</i> that don't need to be initialized when the function is called. The <i>yaw</i> argument gives the angle around the vertical axis relative to the head from which the item is seen. The <i>pitch</i> argument gives the angle relative to the horizontal plane linked to the head from which the item is seen.
The <i>id</i> argument returns an identification integer applicable only to
warriors: It's the actual id for friends, while is a random integer for enemies. If nothing is seen, the <i>item</i> argument is equal to <b>ITEM_NONE</b>. Moreover <i>yaw</i> and <i>pitch</i> are
optional. This function takes
<i>getTimeLostTo(ACTION_WATCH)</i>  seconds to complete.
<br><b>Important Note</b>: Remember that the value of <i>yaw</i> returned by the function is relative to the current orientation of the head, so if you want to rotate the bot to face the item seen, you must use the code "<i>rotate(getDirection()+getTorsoYaw()+getHeadYaw()+yaw)</i>"


<p><a href=#index>Index</a>

<hr><h3><a name="partiv">Part IV - GUN-TACTYX Mods</a></h3>
<font face="verdana,arial" size=-1> 
<blockquote>

<p><i>To modify the resources of the game (images, sounds, models and scenery) is not a simple procedure, because
modeling skills are required along with several tools that only game programmers usually possess.
Anyway one can easily found free resources ready to use on the internet, so even programmers with little experience of
modeling can try. To help people getting started, I wrote these few short notes, but be aware that the procedure to follow is quite complex.<br>
</i>
</blockquote>

</font>
<hr>

<h4><a name="partiv0">4.0 The &quot;.dat&quot; file</a>s</h4>

<p>
 The game already supports the possibility to change scripts that control the AI of the warriors as a goal, in fact the game consists in a match among scripts written by the players.
Other modifications are also possible and they regard the geometry of the levels, the textures, the models, the sounds and the soundtrack.<br>
<br>
All the resources used by the game are included in the file &quot;<i>GUN-TACTYX.dat</i>&quot;,
which is simply a ZIP file the extension of which was renamed, so you can browse and substitute its contents using WinZIP or similar
programs. A user may also create stand-alone &quot;.dat&quot; files,
different from &quot;<i>GUN-TACTYX.dat</i>&quot;, and players could simply choose
them as
their preferred package in the options panel of the game.<br>
 If you succeed in creating an interesting level, feel free to share it with us.<p>The contents
of &quot;.dat&quot; files can be subdivided in different categories listed in the next sections.<br>
<br>
<a href=#index>Index</a>

<hr><h4><a name="partiv1">4.1 Simple substitutions</a></h4>

<p>Here follows a list of the files that you can substitute without a preliminary complex editing phase: Simply put another file with the same name in
&quot;<i>GUN-TACTYX.dat</i>&quot; providing that the file format is the same.
<ul>
  <li><b>Music and Sounds<br>
    </b><br>
    <i><b>soundtrack.mid</b></i> is a MIDI file that corresponds to the soundtrack played continuously during the matches<br>
    <i><b>shot.wav</b></i> is the sound that you hear when a warrior shots<br>
    <font face="verdana,arial" size=-1> 
    <i><b>boom.wav</b></i> is the sound that you hear when a grenade explodes<br>

</font>
    <i><b>death.wav</b></i> is the sound emitted by a warrior when it is
    disabled. Consider that the original sound included in the game is synchronized with the animation of the
    fall, so the animation of the model must be taken into account<br>
    <br>
  </li>
  <li><b>Textures<br>
    </b><br>
    All the images used for the textures must have a width and a height that corresponds to a power of 2 (for example, most of them are 256x256)<br>
    <br>
    <i><b>skyboxFront.jpg</b></i> is the texture applied to the front side of the skybox (there are also images for the back, left, right and top of the skybox)<br>
    <i><b>light.jpg</b></i> is the texture used to render the sun<br>
    <i><b>lensflares.png</b></i> is the texture used to render the lens flare. It contains 4 parts that correspond to the flares<br>
    <i><b></b></i><b><i>texture/guntactyx/bricks.jpg</i></b> is the texture applied to the walls of the arena, or by default to all the surfaces that can't find a corresponding texture file in
    the package<br>
    <i><b>texture/guntactyx/plates.jpg</b></i> is another texture applied to the walls of the arena<br>
    <i><b>texture/guntactyx/ground.jpg</b></i> is a texture applied to the
    ground of the arena<br>
    <b><i>bodyGreen.jpg</i></b> is the texture applied to the body (or legs) of the "green" warriors<br>
    <b><i>bodyRed.jpg</i></b> is the texture applied to the body (or legs) of the
    &quot;red&quot; warriors<br>
    <b><i>bodyBlue.jpg</i></b> is the texture applied to the body (or legs) of the
    &quot;blue&quot; warriors<br>
    <b><i>bodyMagenta.jpg</i></b> is the texture applied to the body (or legs) of the
    &quot;magenta&quot; warriors<br>
    <b><i>torso</i><i>Green.jpg</i></b> is the (optional) texture applied to the
    torso of the "green" warriors<br>
    <b><i>torso</i></b><b><i>Red.jpg</i></b> is the (optional) texture applied to the
    torso of the &quot;red&quot; warriors<br>
    <b><i>torso</i><i>Blue.jpg</i></b> is the (optional) texture applied to the
    torso of the &quot;blue&quot; warriors<br>
    <b><i>torso</i><i>Magenta.jpg</i></b> is the (optional) texture applied to the
    torso of the &quot;magenta&quot; warriors<br>
    <i><b>head.jpg</b></i> is the texture applied to the head of the warriors. It is the same for
    all the warriors even if belonging to different teams<br>
    <i><b>sign.jpg</b></i> is the texture applied to the sign<br>
    <i><b>gun.jpg</b></i> is the texture applied to the gun<br>
    <i><b>flash.jpg</b></i> is the texture used to render the projectiles and a flash in front of the gun when it shots<br>
    <i><b>medikit.jpg</b></i> is the texture applied to the model representing a
    medikit<br>
    <i><b>food.jpg</b></i> is the texture applied to the model representing food
    (energy supply)<br>
    <i><b>armor.jpg</b></i> is the texture applied to the model representing an
    armor<br>
    <i><b>bullets.jpg</b></i> is the texture applied to the model representing a
    recharge of bullets<br>
    <i><b>grenades.jpg</b></i> is the texture applied to the model representing
    a recharge of grenades<br>
    <i><b>boom.jpg</b></i> is the texture used to render the explosion of
    grenades. It contains 16 parts that correspond to the 16 frames of an
    animation<br>
    <b><i>&lt;level_name&gt;.png</i></b> is the image used to represent a top view of the
    arena. There is one of them for each level in the package. If you plan to modify the geometry of the arena, you
    must
    consider to create another image that replicate a sketch of the level. In
    this case, remember that the arena must be centered at the origin of the axis and its size must be 4208 units (corresponding to 131.5 meters). If you change the previous requirements, the map will not display correctly the locations of the warriors&nbsp;<br>
    <b><i>&lt;level_name_XX&gt;.tga</i></b> are the images that contain the
    lightmaps of the levels stored in the package<br>
    <b><i>font.png</i></b> contains the complete set of characters used to render texts. The PNG image must contain also an alpha channel that marks transparent pixels</li>
</ul>

<p><a href=#index>Index</a>

<hr><h4><a name="partiv2">4.2 Models</a></h4>

<p>The models of the game use a modified version of the MD3 format (a Quake3 format) and a quite complex procedure is needed to get them. The
new extension becomes MDX. The files are:
<blockquote>
  <p><b><i>warrior.mdl</i></b> contains information about the models that made
  up the warrior and the textures applied to it<br>
  <b><i>lower.mdx</i></b> is the model used to render the legs of the warriors<br>
  <font face="verdana,arial" size=-1><b><i>upper.mdx</i></b> is the model used
  to render the torso of the warriors<br>
  <b><i>head.mdx</i></b> is the model used to render the heads of the warriors<br>
  <b><i>weapon.mdx</i></b> is the model used to render the weapons<br>
  <b><i>flash.mdx</i></b> is the model used to render the flashes of the shots<br>
  <b><i></i></b><b><i>sign.mdx</i></b> is the model used to render the signs of
  the teams<br>
  <b><i>medikit.mdx</i></b> is the model used to render the medikits<br>
  <b><i>food.mdx</i></b> is the model used to render the food items<br>
  <b><i>armor.mdx</i></b> is the model used to render the armors<br>
  <b><i>bullets.mdx</i></b> is the model used to render the bullets recharges<br>
  <b><i>grenades.mdx</i></b> is the model used to render the grenades recharges</font>
</blockquote>

<p>
To convert MD3 files to MDX you must get the utility &quot;<i>MD3toMDX.exe</i>&quot;
(version 0.6.0) from
the <a href="http://apocalyx.sourceforge.net/modules.php?name=Downloads&amp;d_op=viewdownload&amp;cid=14">Utilities/Converter</a>
section of the APOCALYX site. Then you must proceed as follows:
<ul>
  <li>
To get the models of the warriors or weapons and so on, you can build your own model in MD3 format (there
is a large number of
modeling tools that create files using this kind of format - refer to their manual for more info about MD3
modeling) or use one already made. The bots usually are composed of three pieces:
<i>lower.md3</i> (the legs), <i>upper.md3</i> (the torso), <i>head.md3</i> (the head) and a fourth
one that contains the data of the animations <i>animations.cfg</i>. When you find all the requested files, create a file named
&quot;warrior.mdl&quot; that contains these lines:</li>

<pre>lower.md3 bodyGreen.jpg upper.md3 * head.md3 head.jpg
*0	30	0	25		// BOTH_DEATH1
*29	1	0	25		// BOTH_DEAD1
30	30	0	25		// BOTH_DEATH2
*59	1	0	25		// BOTH_DEAD2
*60	30	0	25		// BOTH_DEATH3
*89	1	0	25		// BOTH_DEAD3
*90	40	0	15		// TORSO_GESTURE
130	6	0	15		// TORSO_ATTACK
*136	6	0	15		// TORSO_ATTACK2
142	5	0	15		// TORSO_DROP
147	4	0	15		// TORSO_RAISE
151	1	0	15		// TORSO_STAND
*152	1	0	15		// TORSO_STAND2
153	8	8	20		// LEGS_WALKCR
161	12	12	20		// LEGS_WALK
173	9	9	18		// LEGS_RUN
182	10	10	20		// LEGS_BACK
*192	10	10	15		// LEGS_SWIM
*202	8	0	15		// LEGS_JUMP
*210	1	0	15		// LEGS_LAND
*211	8	0	15		// LEGS_JUMPB
*219	1	0	15		// LEGS_LANDB
220	10	10	15		// LEGS_IDLE
230	10	10	15		// LEGS_IDLECR
240	7	7	15		// LEGS_TURN</pre>
The first line specifies the names of the three pieces of the bot. The following lines are taken from
  <i>animations.cfg</i> (so they may change for different models). You must put a star (*) if front of the animations that are not used by the game. Read the list above to find out which they are.<br>
<br>
  <li>
Finally, put all the files in the folder of the program &quot;<i>MD3toMDX.exe</i>&quot; and launch it from the command line as follows:<br>
<br>
&nbsp;&nbsp;&nbsp; MD3toMDX warrior.mdl<br>
<br>
You should get the files: <i>lower.mdx</i>, <i>upper.mdx</i>, <i>head.mdx</i>.<br>
To convert the models without animation such as <i>flash.md3,</i> <i>gun.md3</i>
and so on, you can simply use the command:

</font>
<p><font face="verdana,arial" size=-1>&nbsp;&nbsp;&nbsp; MD3toMDX gun.md3

</font>
</p>
<p><font face="verdana,arial" size="-1">to get <i>gun.mdx.</i></font></p>
  <li>
<font face="verdana,arial" size=-1>Completed these steps, you can put all the &quot;.mdx&quot; files that you have obtained in the &quot;GUN-TACTYX.dat&quot;
(or in your own package) with a file called &quot;<i>warrior.mdl</i>&quot;, different from the one cited above, that contains this SINGLE
line:<br>
<br>
&nbsp;&nbsp;&nbsp; lower.mdx bodyGreen.jpg upper.mdx * head.mdx head.jpg<br>
<br>
The star (*) after <i>upper.mdx</i> means that both the upper and lower models
use the same texture (<i>bodyGreen.jpg</i>). If you want to use a different
texture, you must specify another image, for example <i>torsoGreen.jpg</i>.
</ul>

&nbsp;<a href=#index>Index</a>

<hr><h4><a name="partiv3">4.3 Levels</a></h4>

<p>The file that describes the geometry of the arena uses a modified version of the BSP format (a Quake3 format) and a quite complex procedure is needed again to get it. The chosen extension becomes
BSX.
The basic levels are the following, but a user can add more levels with
different names:
<blockquote>
  <p><b><i>arena.bsx</i></b> is a simple flat arena without obstacles and very
  few items in the middle<br>
  <b><i>plaza.bsx</i></b> is very similar to <i>arena</i> but has a few
  buildings in the middle surrounding a few items<br>
  <b><i>maze.bsx</i></b> is a complex level with plenty of walls, ramps, bridges
  and items placed all around&nbsp;</p>
</blockquote>

<p>To convert BSP files to BSX you must get the utility
&quot;<i>BSPtoBSX.exe</i>&quot;&nbsp;(version 0.6.0) from
the <a href="http://apocalyx.sourceforge.net/modules.php?name=Downloads&amp;d_op=viewdownload&amp;cid=14">Utilities/Converter</a>
section of the APOCALYX site. Then you must proceed as follows:
<ul>
  <li>To get the geometry of the arena, you can build your own level in BSP format (for example using Q3Radiant, but read carefully the license of the program - read also its manual for more info about BSP
    modeling) or use one already made. The level must follow some requirements to work correctly with GUN-TACTYX:<br>
    <br>
    <ul>
      <li>Its outer shape must be a square centered at the origin with a size of 4208
        units (131.5 m). This requirement is needed if you want a working top view, so remember to edit accordingly the image
        <i> &lt;level_name&gt;.png</i>. You can put several levels in your
        package, so you must include a map for each of them.<br>
        <br>
      <li>The level must include at least four points marked as &quot;<i>info_player_deathmatch</i>&quot; that are the starting points of the teams. Enough free space must be provided around
        these points to fit all the warriors of the team (for 32 warriors the radius of the area is about 168 units or 5.5
        meters).<br>
        <br>
      <li>The level can include additional items that represent medikits, food,
        armors, bullets and grenades recharges. You can add respectively points
        of the types &quot;<i>item_health</i>&quot;, &quot;<i>item_regen</i>&quot;,
        &quot;<i>item_armor_body</i>&quot;, &quot;<i>ammo_bullets</i>&quot; and
        &quot;<i>ammo_grenades</i>&quot;.<br>
        <br>
      <li>If you want to show the skybox and the sun with its lens flare, you must provide a sky for your level. Use whatever sky you want, it doesn't matter, but the
        <i>q3map_sun</i> data for the sun must be as follows:
<pre>textures/guntactyx/sky
{
	surfaceparm noimpact
	surfaceparm nolightmap
//	surfaceparm sky
	q3map_sun	1 1 1 100 270 15
	q3map_surfacelight 80
	qer_editorimage textures/guntactyx/sky.tga
	skyparms - 512 -
	{
		map textures/guntactyx/sky.tga
		tcMod scale 3 2
		tcMod scroll 0.15 0.15
		depthWrite
	}
}</pre>
The only parameter that you must change in every other sky shader is <i>q3map_sun</i>, otherwise the lightmaps that you are going to get will not be consistent with the sun of GUN-TACTYX.

  </ul>
  </li>
</ul>

<ul>

<li>I can't explain here how to model a complete BSP level. Refer to the manual of your
  modeling program for further questions about this topic. Remember also that GUN-TACTYX supports only the geometry and the lightmaps of BSP files, other elements, the shaders for example, are not considered.<br>
  <br>
<li>When you have your <i> &lt;level_name&gt;.bsp</i> file, put it in the folder of the program
  &quot;<i>BSPtoBSX.exe</i>&quot; and run it from the command line as follows:
  <p>&nbsp;&nbsp;&nbsp; BSPtoBSX &lt;level_name&gt;.bsp<br>
  <br>
  You should get the files: <i>&lt;level_name&gt;.bsx</i> and several <i>&lt;level_name_XX&gt;.tga</i>. The latter are the images
  that contain the lightmaps.<br>
  <br>
<li>Completed these steps, you can put all the files that you have obtained in &quot;<i>GUN-TACTYX.dat</i>&quot;
  or in your own package. You must also include the texture applied to the
  geometry of the level, specifying also their file path. For example, the basic
  levels included in the main package, use textures called <i>bricks.jpg</i>, <i>plates.jpg</i>
  and&nbsp;<i> ground.jpg</i>.
</ul>

<p><a href=#index>Index</a>

<hr><h4><a name="partiv4">4.4 Scripts</a></h4>

  <p>The constants defined in the game can be modified using SMALL scripts. The
  scripts written for this purpose must be stored in the sub-folder
  &quot;\engine&quot;. You can read there a sample called &quot;default.sma&quot;
  that sets all the constants to their default value.<br>
  The current implementation supports only two function, but other are planned
  and future applications are quite powerful. The actual functions are:<h5>setVariable(int:variable,float:value)</h5>
  <p>Sets the <i>value</i> of the variable of index <i>variable</i>. The value
  must be a float. A list of the engine variables accessible to the scripts
  follows below with a description.</p>
  <h5>float:getVariable(int:variable)</h5>
  <p>Gets the <i>value</i> of the variable of index <i>variable</i>. The value
  returned is a float. A list of the engine variables accessible to the scripts
  follows below with a description.</p>
  <p>&nbsp;&nbsp;&nbsp; <b>List of engine variables<br>
  </b><i><br>
  the first argument of the functions listed above<br>
  (the default value is shown in parentheses)</i></p>
  <p><b>  BOT_MEMORY_SIZE</b>&nbsp;&nbsp; Size of the bot's memory in bytes
  (32768 bytes)<p><b>BOT_CPU_FREQUENCY</b>&nbsp;&nbsp; Frequency of the bot's
  CPU in Hertz (10000 Hz)<p><b>SIMULATION_TIME_STEP</b>&nbsp;&nbsp; Duration of
  the time step of the simulator in seconds (0.01 s)<p><b>POWERUP_MEDIKIT_VALUE_INIT</b>&nbsp;&nbsp;
  Initial value of the medikit powerups (100)<p><b>POWERUP_FOOD_VALUE_INIT</b>&nbsp;&nbsp;
  Initial value of the food powerups (100)<p><b>POWERUP_ARMOR_VALUE_INIT</b>&nbsp;&nbsp;
  Initial value of the armor powerup (100)<p><b>POWERUP_BULLETS_VALUE_INIT</b>&nbsp;&nbsp;
  Initial value of the bullets powerups (50)<p><b>POWERUP_GRENADES_VALUE_INIT</b>&nbsp;&nbsp;
  Initial value of the grenades powerups (3)<p><b>POWERUP_MEDIKIT_RESPAWN_TIME</b>&nbsp;&nbsp;
  Time in seconds needed by the medikits to respawn (10 s)<p><b>POWERUP_FOOD_RESPAWN_TIME</b>&nbsp;&nbsp;
  Time in seconds needed by the food to respawn (15 s)<p><b>POWERUP_ARMOR_RESPAWN_TIME</b>&nbsp;&nbsp;
  Time in seconds needed by the armor to respawn (20 s)<p><b>POWERUP_BULLETS_RESPAWN_TIME</b>&nbsp;&nbsp;
  Time in seconds needed by the bullets recharges to respawn (10 s)<p><b>POWERUP_GRENADES_RESPAWN_TIME</b>&nbsp;&nbsp;
  Time in seconds needed by the grenades recharges to respawn (10 s)<p><b>BOT_SIZE_X</b>&nbsp;&nbsp;
  Bot's size in a horizontal direction in meters (1.125 m)<p><b>BOT_SIZE_Y</b>&nbsp;&nbsp;
  Bot's height in meters when standing (1.5 m)<p><b>BOT_SIZE_Y_CROUCHED</b>&nbsp;&nbsp;
  Bot's height in meters when crouched (1.125 m)<p><b>BOT_SIZE_Z</b>&nbsp;&nbsp;
  Bot's size in a horizontal direction in meters (1.125 m)<p><b>BOT_SPACING</b>&nbsp;&nbsp;
  Bots' spacing at the beginning of a match (1.75 m)<p><b>BOT_TIME_LOST_TO_SIGHT</b>&nbsp;&nbsp;
  Time lost by the bot calling the <i>sight()</i> function (0.01 s)<p><b>BOT_TIME_LOST_TO_AIM</b>&nbsp;&nbsp;
  Time lost by the bot calling the <i>aim()</i> function (0.04 s)<p><b>BOT_TIME_LOST_TO_HEAR</b>&nbsp;&nbsp;
  Time lost by the bot calling the <i>hear()</i> function (0.04 s)<p><b>BOT_TIME_LOST_TO_WATCH</b>&nbsp;&nbsp;
  Time lost by the bot calling the <i>watch()</i> function (0.04 s)<p><b>BOT_TIME_LOST_TO_LISTEN</b>&nbsp;&nbsp;
  Time lost by the bot calling the <i>listen()</i> function (0.04 s)<p><b>BOT_TIME_NEEDED_TO_SAY</b>&nbsp;&nbsp;
  Time needed by the bot calling the <i>say()</i> function (0.5 s)<p><b>BOT_TIME_NEEDED_TO_SPEAK</b>&nbsp;&nbsp;
  Time needed by the bot calling the <i>speak()</i> function (0.25 s)<p><b>BOT_TIME_NEEDED_TO_MOVE</b>&nbsp;&nbsp;
  Time needed by the bot calling one of the movement functions (1 s)<p><b>BOT_TIME_NEEDED_TO_DROP</b>&nbsp;&nbsp;
  Time needed by the bot calling the <i>drop()</i> or <i>raise()</i> functions
  (0.5 s)<p><b>BOT_TIME_NEEDED_TO_SHOOT</b>&nbsp;&nbsp; Time needed by the bot
  calling the <i>shoot()</i> or <i>launch()</i> function (0.5 s)<p><b>BOT_KICK_SPEED_MAX</b>&nbsp;&nbsp;
  Maximum speed that a bot can transfer to a target after a collision (5 m/s)<p><b>BOT_SPEED_VERTICAL_MAX</b>&nbsp;&nbsp;
  Maximum speed that a bot can reach surviving a fall (7.5 m/s)<p><b>BOT_SPEED_ROTATION</b>&nbsp;&nbsp;
  Bot's rotation speed (1.5708 rad/s)<p><b>BOT_SPEED_WALKCR</b>&nbsp;&nbsp;
  Bot's walking (crouched) speed (2.5 m/s)<p><b>BOT_SPEED_WALKBK</b>&nbsp;&nbsp;
  Bot's walking (backward) speed (-2.5 m/s)<p><b>BOT_SPEED_WALK</b>&nbsp;&nbsp;
  Bot's walking speed (2.5 m/s)<p><b>BOT_SPEED_RUN</b>&nbsp;&nbsp; Bot's running
  speed (5 m/s)<p><b>BOT_ENERGY_MAX</b>&nbsp;&nbsp; Maximum energy that a bot
  can store (100)<p><b>BOT_ENERGY_INIT</b>&nbsp;&nbsp; Bot's initial energy (50)<p><b>BOT_ENERGY_RUN</b>&nbsp;&nbsp;
  Energy lost every second by a bot running (2/s)<p><b>BOT_ENERGY_STAND</b>&nbsp;&nbsp;
  Energy regained every second by a bot standing (1/s)<p><b>BOT_ENERGY_DROP_MAX</b>&nbsp;&nbsp;
  Minimum energy that a bot can drop as a food (50)<p><b>BOT_HEALTH_MAX</b>&nbsp;&nbsp;
  Maximum health that a bot can store (100)<p><b>BOT_HEALTH_INIT</b>&nbsp;&nbsp;
  Bot's initial health (50)<p><b>BOT_HEALTH_BULLET</b>&nbsp;&nbsp; Health lost
  by a bot for a bullt hit (50)<p><b>BOT_HEALTH_GRENADE_MAX</b>&nbsp;&nbsp;
  Maximum health lost by a bot when a grenade explodes in contact (150)<p><b>BOT_HEALTH_DROP_MAX</b>&nbsp;&nbsp;
  Minimum health that a bot can drop as a medikit (50)<p><b>BOT_ARMOR_MAX</b>&nbsp;&nbsp;
  Maximum amount of armor that a bot can store (100)<p><b>BOT_ARMOR_INIT</b>&nbsp;&nbsp;
  Bot's initial armor (0)<p><b>BOT_ARMOR_DROP_MAX</b>&nbsp;&nbsp; Minimum amount
  of armor that a bot can drop (100)<p><b>BOT_TORSO_YAW_MAX</b>&nbsp;&nbsp;
  Maximum bot's torso yaw angle (1.047 rad)<p><b>BOT_TORSO_YAW_MIN</b>&nbsp;&nbsp;
  Minimum bot's torso yaw angle (-1.047 rad)<p><b>BOT_TORSO_PITCH_MAX</b>&nbsp;&nbsp;
  Maximum bot's torso pitch angle (0.7854 rad)<p><b>BOT_TORSO_PITCH_MIN</b>&nbsp;&nbsp;
  Minimum bot's torso yaw angle (-0.7854 rad)<p><b>BOT_TORSO_SPEED_ROT</b>&nbsp;&nbsp;
  Bot's torso rotation speed (1.5708 rad/s)<p><b>BOT_HEAD_YAW_MAX</b>&nbsp;&nbsp;
  Maximum bot's head yaw angle (1.047 rad)<p><b>BOT_HEAD_YAW_MIN</b>&nbsp;&nbsp;
  Minimum bot's head yaw angle (-1.047 rad)<p><b>BOT_HEAD_PITCH_MAX</b>&nbsp;&nbsp;
  Maximum bot's head pitch angle (0.7854 rad)<p><b>BOT_HEAD_PITCH_MIN</b>&nbsp;&nbsp;
  Minimum bot's head pitch angle (-0.7854 rad)<p><b>BOT_HEAD_SPEED_ROT</b>&nbsp;&nbsp;
  Bot's head rotation speed (1.5708 rad/s)<p><b>BOT_HEAD_ANGLE_OF_VIEW</b>&nbsp;&nbsp;
  Bot's angle of view (0.5236 rad/s)<p><b>BOT_SENSORS_DISTANCE_MAX</b>&nbsp;&nbsp;
  Maximum distance useful for bot's sensors (200 m)<p><b>WEAPON_LENGTH</b>&nbsp;&nbsp;
  Weapon length (0.9375 m)<p><b>WEAPON_HEIGHT</b>&nbsp;&nbsp; Weapon height from
  the bots center (0.5625 m)<p><b>WEAPON_BULLET_SPEED</b>&nbsp;&nbsp; Speed of
  bullets (30 m/s)<p><b>WEAPON_BULLET_LOAD_MAX</b>&nbsp;&nbsp; Maximum load of
  bullets (100)<p><b>WEAPON_BULLET_LOAD_INIT</b>&nbsp;&nbsp; Initial load of
  bullets (50)<p><b>WEAPON_BULLET_DROP_MAX</b>&nbsp;&nbsp; Minimum recharge of
  bullets that a bot can drop (50)<p><b>WEAPON_GRENADE_SPEED</b>&nbsp;&nbsp;
  Speed of grenades (15 m/s)<p><b>WEAPON_GRENADE_EXPL_DELAY</b>&nbsp;&nbsp; Time
  that a grenade waits before exploding (3 s)<p><b>WEAPON_GRENADE_EXPL_DURATION</b>&nbsp;&nbsp;
  Duration of a grenade explosion (1 s)<p><b>WEAPON_GRENADE_RANGE_MAX</b>&nbsp;&nbsp;
  Maximum range of the damages that a grenade inflicts (5 m)<p><b>WEAPON_GRENADE_LOAD_MAX</b>&nbsp;&nbsp;
  Maximum number of grenades that a weapon can store (3)<p><b>WEAPON_GRENADE_LOAD_INIT</b>&nbsp;&nbsp;
  Initial number of grenades in a weapon (1)<p><b>WEAPON_GRENADE_DROP_MAX</b>&nbsp;&nbsp;
  Minimum number of grenades can a bot can drop (3)<p><b>WORLD_GRAVITY</b>&nbsp;&nbsp;
  Gravity acceleration (-9.81 m/s<sup>2</sup>)<p><b>ARENA_SIZE&nbsp;&nbsp; </b>Length
  of the arena side (131.5 m)<p><b>GOAL_SIZE</b>&nbsp;&nbsp; Radius of the goal
  area (7.5 m)
  <p><b>TARGET_SIZE</b>&nbsp;&nbsp; Radius of the target (0.3125 m)
  <p><b>TARGET_MAX_SPEED</b>&nbsp;&nbsp; Largest speed reachable by the target (15 m/s)
  <p><b>GROUND_RESTITUTION</b>&nbsp;&nbsp;
  Fraction of speed kept by bouncing objects after a collision (0.8)<br>
  <p><a href=#index>Index</a>

<hr><h4><a name="partiv5">4.5 Command line options</a></h4>

  <p>Another way to modify the default behavior of GUN-TACTYX is to use the
  command line options. They are:
  <ul>
    <p><li><b>-nosetup<br>
      <br>
      </b>passing this string, the setup dialog box does not appear when the
      game is executed and the values in the file &quot;<i>setup.ini</i>&quot;
      (or in the file specified by the next option) are used instead.<br>
    </li>
    <p><li><b>-setup&quot;</b><i>file_name</i><b>&quot;</b><b><br>
      <br>
      </b>this option specifies the file that contains the setup parameters. By
      default, that file is <i>setup.ini</i>. Don't forget the <b>&quot;</b>
      delimiters that surround the file name (useful in particular when the file
      name contains space characters).<br>
    </li>
    <p><li><b>-options&quot;</b><i>file_name</i><b>&quot;<br>
      <br>
      </b>this option specifies the file that contains the option parameters
      (those that specify the characteristics of the matches). By
      default, that file is <i>options.ini</i>. Don't forget the <b>&quot;</b>
      delimiters that surround the file name (useful in particular when the file
      name contains space characters).<br>
    </li>
    <p><li><b>-stats&quot;</b><i>file_name</i><b>&quot;<br>
      <br>
      </b>this option specifies the file that contains the results of the
      matches collected during matches in <i>random mode</i>. By
      default, that file is <i>GUN-TACTYX-results.txt</i>. Don't forget the <b>&quot;</b>
      delimiters that surround the file name (useful in particular when the file
      name contains space characters).<br>
    </li>
    <p><li><b>-playrandom<br>
      <br>
      </b>this option specifies that a sequence of matches in <i>random mode</i>
      must start immediately when the application starts.<br>
    </li>
    <p><li><b>-playlist&quot;</b><i>file_name</i><b>&quot;</b><b><br>
      <br>
      </b>this option specifies the file that contains the list of matches to be
      played. The matches start immediately and the application exits when the
      list is exhausted. The file must be in text format and every line
      represents a match. The format of a line is the following:&quot;<i>teamA,cornerA,teamB,cornerB,teamC,cornerC,teamD,cornerD,</i>&quot;,
      where <i>teamX</i> is the name of a script that must exists and <i>cornerX</i>
      is the index of one of the corners (from 0 to 3). In each line don't
      forget the comma at the end. Don't forget also the <b>&quot;</b>
      delimiters that surround the file name in the command line (useful in particular when the file
      name contains space characters).<br>
    </li>
    <p><li><b>-maxmatches</b><i>nnn</i><b><br>
      <br>
      </b>this option specifies the maximum number of matches in <i>random mode</i>.
      When the limit is reached, the application stops its execution and exits.
      The value of matches (<i>nnn</i>) must follow immediately the <i>-maxmatches</i>
      string without spaces of separation. For example <i>-maxmatches10</i>
      tells the application to execute 10 random matches and then to exit.<br>
    </li>
    <p><li><b>-timemult</b><i>nnn</i><b><br>
      <br>
      </b>this option specifies the time multiplier that must be used during
      matches by the application. The value of the multiplier (<i>nnn</i>) must
      follow immediately the <i>-timemult</i> string without spaces of
      separation. For example <i>-timemult4</i> tells the application to execute
      the matches with a speed that is 4 times the normal one. Only integer
      values are accepted.</li>
  </ul>
  <p><a href=#index>Index</a>

<hr><p>Any question? Contact <b>Leonardo Boselli</b> at <A HREF="mailto:tetractys@users.sourceforge.net">tetractys@users.sf.net</A>
<br>Find <b>GUN-TACTYX</b>  at <a HREF="http://guntactyx.gameprog.it">http://guntactyx.gameprog.it<br>
  </a>and the <b>APOCALYX Engine</b> at <A HREF="http://apocalyx.sourceforge.net">http://apocalyx.sf.net</A>

  </font>
</body>
</html>
